#+TITLE: Emacs configuration
#+OPTIONS: num:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+STARTUP: overview 

* global settings
#+BEGIN_SRC emacs-lisp
  (setq colon-double-space t)
  ;; tell the Emacs fill commands to insert two spaces after a colon:

  ;; Rebind 'C-x C-b' for 'buffer-menu'
  (global-set-key "\C-x\C-b" 'buffer-menu)
  ;; which not only lists the buffers, but moves point into that window

  ;; Set cursor color
  (set-cursor-color "white")

  ;; Set mouse color
  (set-mouse-color "white")

  ;;(setq make-backup-files nil)

  ;;close tool bar 
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)

  ;;close menu bar
  (menu-bar-mode -1)

  ;;close toggle sroll bar
  (toggle-scroll-bar -1)

  ;; user y and n instead of yes and no 
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; open line number at left side
  ;;  (global-linum-mode 1)

  ;; emacsclient -a "" -c
  ;; shortcut to open emacsclient settings in terminal

  ;; set the meta-key to be super key
  ;; (setq  x-meta-keysym 'super
  ;;        x-super-keysym 'meta)

  ;; open terminal 
  (global-set-key "\C-\M-x" 'term)

  ;; open  eshell
  (global-set-key "\C-x\ \C-x" 'shell)

  ;;open init.el file with f1
  (defun open-my-init-file()
    (interactive)
    (find-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "<f1>") 'open-my-init-file)

  ;;open myinit.org file  with f2
  (defun open-my-init-org-file()
    (interactive)
    (find-file "~/.emacs.d/myconf/myinit.org"))
  (global-set-key (kbd "<f2>") 'open-my-init-org-file)

  ;;open .bashrc file with f3
  (defun open-my-bash-file()
    (interactive)
    (find-file "~/.bashrc"))
  (global-set-key (kbd "<f3>") 'open-my-bash-file)

#+END_SRC

#+RESULTS:
: t

* spacemacs-theme
  M-x package-install  spacemacs-theme
  M-x customize-themes
  spacemacs dark

* Paste with xsel
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-primary t)
(setq select-enable-primary t)

;; 支持emacs和外部程序的粘贴
(setq x-select-enable-clipboard t)

;; use xsel to copy/paste in emacs-nox
(unless window-system
(when (getenv "DISPLAY")
(defun xsel-cut-function (text &optional push)
(with-temp-buffer
(insert text)
(call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
(defun xsel-paste-function()
(let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
(unless (string= (car kill-ring) xsel-output)
xsel-output )))
(setq interprogram-cut-function 'xsel-cut-function)
(setq interprogram-paste-function 'xsel-paste-function)
))

#+END_SRC

#+RESULTS:
* Move-Text
#+BEGIN_SRC emacs-lisp
    (defun move-line (n)
      "Move the current line up or down by N lines."
      (interactive "p")
      (setq col (current-column))
      (beginning-of-line) (setq start (point))
      (end-of-line) (forward-char) (setq end (point))
      (let ((line-text (delete-and-extract-region start end)))
        (forward-line n)
        (insert line-text)
        ;; restore point to original column in moved line
        (forward-line -1)
        (forward-char col)))

    (defun move-line-up (n)
      "Move the current line up by N lines."
      (interactive "p")
      (move-line (if (null n) -1 (- n))))

    (defun move-line-down (n)
      "Move the current line down by N lines."
      (interactive "p")
      (move-line (if (null n) 1 n)))


    (defun move-region (start end n)
      "Move the current region up or down by N lines."
      (interactive "r\np")
      (let ((line-text (delete-and-extract-region start end)))
        (forward-line n)
        (let ((start (point)))
          (insert line-text)
          (setq deactivate-mark nil)
          (set-mark start))))

    (defun move-region-up (start end n)
      "Move the current line up by N lines."
      (interactive "r\np")
      (move-region start end (if (null n) -1 (- n))))

    (defun move-region-down (start end n)
      "Move the current line down by N lines."
      (interactive "r\np")
      (move-region start end (if (null n) 1 n)))


  (defun move-line-region-up (&optional start end n)
    (interactive "r\np")
    (if (use-region-p) (move-region-up start end n) (move-line-up n)))

  (defun move-line-region-down (&optional start end n)
    (interactive "r\np")
    (if (use-region-p) (move-region-down start end n) (move-line-down n)))

  (global-set-key (kbd "M-<up>") 'move-line-region-up)
  (global-set-key (kbd "M-<down>") 'move-line-region-down)


#+END_SRC
* set hotkey
for current buffer keybindings settings
M-x: global-set-key 
Press the wanted keybindings
input the mapped command
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-o" 'compile)
  (global-set-key (kbd "C-c C-.") 'org-mark-ring-goto)
  (global-set-key (kbd "C-M-,") 'menu-bar-mode)

#+END_SRC

#+RESULTS:
: menu-bar-mode

* Durchsicht f8
#+BEGIN_SRC emacs-lisp
(setq is-alpha nil)
(defun transform-window (a ab)
(set-frame-parameter (selected-frame) 'alpha (list a ab))
(add-to-list 'default-frame-alist (cons 'alpha (list a ab)))
)
(global-set-key [(f8)] (lambda()
(interactive)
(if is-alpha
(transform-window 100 100)
(transform-window 75 50))
(setq is-alpha (not is-alpha))))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (if is-alpha (transform-window 100 100) (transform-window 75 50)) | (setq is-alpha (not is-alpha)) |
* Deutsch Rechtschreiben check f9
sudo apt install ispell 
sudo apt install aspell-de aspell-en
sudo apt-get install aspell-es aspell-eu-es
M-x ispell to start dictionaries
#+begin_src emacs-lisp
;;switch dictionaries between German and English with F9 key
(defun fd-switch-dictionary()
      (interactive)
      (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "deutsch8") "english" "deutsch8")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))
(global-set-key (kbd "<f9>")   'fd-switch-dictionary)
#+end_src
* echo-key

M-x echo-keys-mode
#+BEGIN_SRC emacs-lisp

(defvar *echo-keys-last* nil "Last command processed by `echo-keys'.")

(defun echo-keys-mode ()
  (interactive)
  (if (member 'echo-keys-hook pre-command-hook)
      (progn
        (remove-hook 'pre-command-hook 'echo-keys-hook)
        (dolist (window (window-list))
          (when (eq (window-buffer window) (get-buffer "*echo-key*"))
            (delete-window window))))
    (progn
      (add-hook 'pre-command-hook 'echo-keys-hook)
      (delete-other-windows)
      (split-window nil (- (window-width) 8) t)
      (other-window 1)
      (switch-to-buffer (get-buffer-create "*echo-key*"))
      (set-window-dedicated-p (selected-window) t)
      (other-window 1))))

(defun echo-keys-hook ()
  (let ((deactivate-mark deactivate-mark))
    (when (this-command-keys)
      (with-current-buffer (get-buffer-create "*echo-key*")
        (goto-char (point-max))
        ;; self  self
        ;; self  other \n
        ;; other self  \n
        ;; other other \n
        (unless (and (eq 'self-insert-command *echo-keys-last*)
                     (eq 'self-insert-command this-command))
          (insert "\n"))
        (if (eql this-command 'self-insert-command)
            (let ((desc (key-description (this-command-keys))))
              (if (= 1 (length desc))
                  (insert desc)
                (insert " " desc " ")))
          (insert (key-description (this-command-keys)))
          )
        (setf *echo-keys-last* this-command)
        (dolist (window (window-list))
          (when (eq (window-buffer window) (current-buffer))
            ;; We need to use both to get the effect.
            (set-window-point window (point))
            (end-of-buffer)))))))

(provide 'echo-keys)


#+END_SRC

* chinese fonts
install cnfonts
M-x cnfonts-edit-profile
#+begin_src emacs-lisp
(require 'cnfonts)
;; 让 cnfonts 随着 Emacs 自动生效。
;; (cnfonts-enable)
;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
;; (cnfonts-set-spacemacs-fallback-fonts)
( cnfonts-enable)

#+end_src

#+RESULTS:
| cnfonts-set-font-first-time |

* PDF tools
[[https://github.com/politza/pdf-tools][github link]]
dependency
$ sudo aptitude install libpng-dev zlib1g-dev
$ sudo aptitude install libpoppler-glib-dev
$ sudo aptitude install libpoppler-private-dev

M-x pdf-tools-install RET
M-x pdf-info-check-epdfinfo RET
* recentf
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src
* which key
Brings up some help
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode))

#+END_SRC
* Counsel
#+BEGIN_SRC emacs-lisp
   (use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))
   #+end_src
* ivy
#+begin_src emacs-lisp
  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))
#+end_src

* Swiper
#+begin_src emacs-lisp


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
         ("C-c C-r" . ivy-resume)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

#+RESULTS:
: counsel-find-file

* Avy 
See https://github.com/abo-abo/avy for more info

#+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
#+END_SRC
* Autocomplete
#+BEGIN_SRC emacs-lisp
    (use-package auto-complete
    :ensure t
    :init
    (progn
    (ac-config-default)
      (global-auto-complete-mode t)
     ))

#+END_SRC

#+RESULTS:

* Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
#+END_SRC

#+RESULTS:

* Yasnippet
#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))      


#+END_SRC



#+RESULTS:
: t

* auto-yasnippet
#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
:ensure t)
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
#+END_SRC



* Impatient Mode
 M-x package-install impatient-mode
 M-x httpd-start
 M-x impatient-mode
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/impatient-mode")
(require 'impatient-mode)
#+end_src

#+RESULTS:
: impatient-mode

* Projectile
#+begin_src emacs-lisp
  ;; projectile
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))


#+end_src

* fold this
M-x : package install :  fold this
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-c C-f") 'fold-this-all)
(global-set-key (kbd "C-M-f") 'fold-this)
;;(global-set-key (kbd "C-c M-f") 'fold-this-unfold-all)

#+END_SRC

#+RESULTS:
: fold-this
* Helm
M-x: package install: helm
for C-x C-f  :find files
C-l go back to the above directory
#+begin_src emacs-lisp
(helm-mode 1)
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
#+end_src

#+RESULTS:
: helm-execute-persistent-action
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure
:bind (("C-x g" . magit-status)))

#+END_SRC

#+RESULTS:
: magit-status

* Latex
sudo apt install texlive-full
sudo apt install texlive-xetex

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-latex-create-formula-image-program 'dvipng)


  (use-package tex
  :ensure auctex)


  (setq Tex-auto-save t)
  (setq Tex-parse-self t)
  (setq-default Tex-master nil)

  (setq org-latex-compiler "xelatex")
  ;;enable cdlatex
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

  (add-hook 'LaTeX-mode-hook
                  (lambda ()
                        (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex --synctex=1%(mode)%' %t" TeX-run-TeX nil t))))
  (global-set-key "\C-z" 'latex-math-preview-insert-symbol)

#+END_SRC

#+RESULTS:
| turn-on-org-cdlatex | turn-on-auto-fill | turn-on-flyspell | (lambda nil (org-bullets-mode 1)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* Stardict 
 sudo apt install  stardict 
 sudo apt install  sdcv 
 download dictionaries from
 http://download.huzheng.org/ 
 http://download.huzheng.org/zh_TW/
 extract, and put them in /usr/share/stardict/dic/ 
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c z") 'kid-sdcv-to-buffer)
  (defun kid-sdcv-to-buffer ()
    (interactive)
    (let ((word (if mark-active
                    (buffer-substring-no-properties (region-beginning) (region-end))
                    (current-word nil t))))
      (setq word (read-string (format "Search the dictionary for (default %s): " word)
                              nil nil word))
      (set-buffer (get-buffer-create "*sdcv*"))
      (buffer-disable-undo)
      (erase-buffer)
      (let ((process (start-process-shell-command "sdcv" "*sdcv*" "sdcv" "-n" word)))
        (set-process-sentinel
         process
         (lambda (process signal)
           (when (memq (process-status process) '(exit signal))
             (unless (string= (buffer-name) "*sdcv*")
               (setq kid-sdcv-window-configuration (current-window-configuration))
               (switch-to-buffer-other-window "*sdcv*")
               (local-set-key (kbd "d") 'kid-sdcv-to-buffer)
               (local-set-key (kbd "q") (lambda ()
                                          (interactive)
                                          (bury-buffer)
                                          (unless (null (cdr (window-list))) ; only one window
                                            (delete-window)))))
             (goto-char (point-min))))))))

#+END_SRC

#+RESULTS:
: kid-sdcv-to-buffer

* Add Time now 
#+BEGIN_SRC  emacs-lisp
(defun now ()
(interactive)
( insert (current-time-string)))

#+END_SRC

#+RESULTS:
: now
* html-chrome
https://github.com/nikclayton/ob-html-chrome
#+begin_src emacs-lisp
  (require 'ob-html-chrome)
  (setq org-confirm-babel-evaluate
        (lambda (lang body)
          (not (string= lang "html-chrome"))))

  (setq org-babel-html-chrome-chrome-executable
        "/usr/bin/google-chrome")
#+end_src

#+RESULTS:
: /usr/bin/google-chrome

* company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))

  (use-package autoinsert
    :ensure t
    :config
    (setq auto-insert-query nil)
    (add-hook 'find-file-hook 'auto-insert)
    (auto-insert-mode t))

#+end_src
* ispell-region
mark all the region I want to check, and M-X ispell-region
space for nothing and numbers for replace.

* lsp-java

[[https://emacs-lsp.github.io/dap-mode/][lsp-java github.io]]

[[https://emacs-lsp.github.io/dap-mode/][dap-java github.io]]

[[https://github.com/emacs-lsp/lsp-java][lsp-java github]]

[[https://github.com/emacs-lsp/dap-mode][dap-java github]]

|---------------------------------------+--------------+---------------------------|
| lsp-java-generate-getters-and-setters | 需要安装helm | 在所有的可选中 C-SPE 选中 |
|---------------------------------------+--------------+---------------------------|
|                                       |              |                           |


* Orgmode 
** commods
|---------------------------------------+-------------------------------|
| org mode manual in emccs              | M-x org-info                  |
| C-x C-q                               | enable readonly               |
| C-;                                   | 可以检查当前单词的拼写        |
| sudo apt install grip,  M-x grip mode | live compile for markdown     |
| C-c C-z                               | add note to items, quick note |
| C-c C-c                               | switch between them           |
|                                       |                               |
|---------------------------------------+-------------------------------|
** checklist
可以在item后面加上[0/2] or [0%]
- [ ]  S-A-Ent for a new checklist
- [ ]  C-c C-c to finish this checklist
** link 

|----------+---------------+------------------------------|
| commands | function      | explain                      |
|----------+---------------+------------------------------|
| C-c C-o  | goto the link | must in the link description |
| C-c C-l  | edit the link | also in the link             |
| C-c C-.  | go back       |                              |
|----------+---------------+------------------------------|

*** internal file
link define options

|----------------|
| * headline     |  
| #+NAME: target |
| <<target>>     |
|----------------|

*** external file

#+begin_src 
[[.../file.org::345]] go to the file of line 345
[[.../file.org::target]] to to the file with target, 3 kinds of internal

[[file:~/code/main.c::255  ]]               进入到 255 行
[[file:~/xx.org::My Target ]]                   找到目标‘<<My Target>>’
[[file:~/xx.org::#my-custom-id]]               查找自定义 id 的项

#+end_src



#+BEGIN_SRC emacs-lisp
(require 'cl-lib)
      (use-package org
        :ensure t
        :pin org)
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
      (custom-set-variables
       '(org-directory "~/Dropbox/Note/")
       '(org-default-notes-file (concat org-directory "/Note.org"))
       '(org-export-html-postamble nil)
       '(org-hide-leading-stars t)
       '(org-startup-folded (quote overview))
       '(org-startup-indented t)
       '(org-confirm-babel-evaluate nil)
       '(org-src-fontify-natively t)
       )

      (global-set-key "\C-ca" 'org-agenda)
      (setq org-agenda-start-on-weekday nil)
      (setq org-agenda-custom-commands
            '(("c" "Simple agenda view"
               ((agenda "")
                (alltodo "")))))

      (global-set-key (kbd "C-c c") 'org-capture)

      (setq org-agenda-files (list 
                              "~/Dropbox/Note/Appointment.org"
                              "~/Dropbox/Note/Note.org"
                              "~/Dropbox/Note/journal/"
                              ))

      (setq org-capture-templates
      '(("a" "Appointment" entry (file+headline "~/Dropbox/Note/Appointment.org"     "Appointment")  "* %u %? " :prepend t)
      ("m" "Math"          entry (file+headline "~/Dropbox/Sprache/Math/Math.org"           "Math")  "* %u %? " :prepend t)
      ("p" "Physik"        entry (file+headline "~/Dropbox/Sprache/Physik/Physik.org"      "Physik")  "* %u %? " :prepend t)
      ("r" "ROS"           entry (file+headline "~/Dropbox/Sprache/ROS/ROS.org"               "ROS")  "* %u %? " :prepend t)
      ("i" "Inf"           entry (file+headline "~/Dropbox/Sprache/Inf/Inf.org"               "Inf")  "* %u %? " :prepend t)
      ))
      (defadvice org-capture-finalize
          (after delete-capture-frame activate)
        "Advise capture-finalize to close the frame"
        (if (equal "capture" (frame-parameter nil 'name))
            (delete-frame)))
      (defadvice org-capture-destroy
          (after delete-capture-frame activate)
        "Advise capture-destroy to close the frame"
        (if (equal "capture" (frame-parameter nil 'name))
            (delete-frame)))
      (use-package noflet
        :ensure t )
      (defun make-capture-frame ()
        "Create a new frame and run org-capture."
        (interactive)
        (make-frame '((name . "capture")))
        (select-frame-by-name "capture")
        (delete-other-windows)
        (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
          (org-capture)))
	  ;; (require 'ox-beamer)
	  ;; for inserting inactive dates
	  (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))
	  
      (use-package htmlize :ensure t)
      (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
      ;;sure to enable software ditaa to work
#+END_SRC

#+RESULTS:
: /usr/share/ditaa/ditaa.jar

* ToDo
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  '((type "Work(w!)" "Study(s!)" "forFun(f!)" "|")
    (sequence  "TODO(t!)"  "|" "DONE(d!)")
))

(setq org-todo-keyword-faces
  '(
  ("Work" .       (:foreground "white" :weight bold))
  ("Study" .      (:foreground "red" :weight bold))
  ("forFun" .     (:foreground "black" :weight bold))
  ("DONE" .       (:foreground "green" :weight bold))
))


#+END_SRC
* Agenda  
|-----------------+----------------------------------+---------------|
| comands         | explain                          | function      |
|-----------------+----------------------------------+---------------|
| C-c c           | add new capture                  | capture       |
| C-c C-s [fn:01] | add new scheduling to  items     | agenda        |
| C-c C-t [fn:02] | add new TODO to  items           | todo          |
| C-c C-d         | add new deadline to items        | agenda        |
| C-c a           | check  agenda function           | agenda        |
| C-c a a         | check all agenda items           | f, b          |
| S-f             | from capture list to file        | agenda        |
| C-'     [fn:03] | switch in all agenda file        | agenda        |
| C-c C-x C-c     | view todo, pri and tags of items | summary       |
| C-c C-c(q)      | add tags in items                | must in items |
|                 |                                  |               |
|-----------------+----------------------------------+---------------|

[fn:01]  在任何的item上，C-c C-s都可以增加scheduling,可以个性的指定加入的
日期和时间。如果该item有TODO 特性，增加 ++1w 在时间后面，可以多次更新

[fn:02] 在上次更新的-State "DONE"之前加上本次的完成情况，然后不管TODO
的标签是什么，C-c C-t d (done)， 该item的scheduling将会被自动更新到下
一次的设定时间(一周后)。在时间轴上显示历次完成情况.


[fn:03] shift + f can dynamical view the agenda items. and Tab goto
the linked agenda file.
* capture 

* org-roam
org-roam-mode
org-roam-db-build-cache
org-roam-find-index
org-roam-find-file
org-roam-insert

#+BEGIN_SRC emacs-lisp
  (use-package org-roam-server
    :ensure t)

  ;; (use-package org-roam-server
  ;;   :ensure t
  ;;   :config
  ;;   (setq org-roam-server-host "127.0.0.1"
  ;;         org-roam-server-port 8082
  ;;         org-roam-server-export-inline-images t
  ;;         org-roam-server-authenticate nil
  ;;         org-roam-server-label-truncate t
  ;;         org-roam-server-label-truncate-length 60
  ;;         org-roam-server-label-wrap-length 20))



    (setq org-roam-directory "~/Dropbox/")
    (add-hook 'after-init-hook 'org-roam-mode)
    (setq org-roam-completion-system 'helm)
    (setq org-roam-buffer-width 0.2)

    (defun my/org-roam--backlinks-list-with-content (file)
      (with-temp-buffer
        (if-let* ((backlinks (org-roam--get-backlinks file))
                  (grouped-backlinks (--group-by (nth 0 it) backlinks)))
            (progn
              (insert (format "\n\n* %d Backlinks\n"
                              (length backlinks)))
              (dolist (group grouped-backlinks)
                (let ((file-from (car group))
                      (bls (cdr group)))
                  (insert (format "** [[file:%s][%s]]\n"
                                  file-from
                                  (org-roam--get-title-or-slug file-from)))
                  (dolist (backlink bls)
                    (pcase-let ((`(,file-from _ ,props) backlink))
                      (insert (s-trim (s-replace "\n" " " (plist-get props :content))))
                      (insert "\n\n")))))))
        (buffer-string)))

      (defun my/org-export-preprocessor (backend)
        (let ((links (my/org-roam--backlinks-list-with-content (buffer-file-name))))
          (unless (string= links "")
            (save-excursion
              (goto-char (point-max))
              (insert (concat "\n* Backlinks\n") links)))))

      (add-hook 'org-export-before-processing-hook 'my/org-export-preprocessor)




#+END_SRC

#+RESULTS:
| my/org-export-preprocessor |
* helm-org-rifle
M-x: package install helm-org-rifle
在已经打开的所有文件中匹配搜索关键词，是所有打开文件
keywords searching in all opened files, external files,

#+Begin_src emacs-lisp
  (require 'helm-org-rifle)
#+end_src

#+RESULTS:
: helm-org-rifle

* org-mind-map

[[https://github.com/the-humanities/org-mind-map][github link]] is here,

M-x org-mind-map-write  to execute 

add legend, text display, image display
:PROPERTIES:
:OMM-COLOR: GREEN
:org-mind-map-include-text  t
:org-mind-map-include-image  t
:OMM-LEGEND: Legend entry
:END:

#+begin_src emacs-lisp
  ;; This is an Emacs package that creates graphviz directed graphs from
  ;; the headings of an org file
  (use-package org-mind-map
    :init
    (require 'ox-org)
    :ensure t
    ;; Uncomment the below if 'ensure-system-packages` is installed
    ;;:ensure-system-package (gvgen . graphviz)
    :config
    (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    )


#+end_src

#+RESULTS:
: t
* org-journal
<<quickstart>>
|--------------------------------+------------------------------------------------|
| M-x  org-journal-mode          | activate the mode                              |
| C-c C-j(org-journal-new-entry) | create one, can be today, can be in the futher |
| C-u C-c C-j                    | go to the current entry                        |
| C-c C-t                        | add TODO                                       |
| C-c C-d                        | add deadline                                   |
| C-c a a                        | view in agenda                                 |
|--------------------------------+------------------------------------------------|


* org-html-themes
[[https://github.com/fniessen/org-html-themes][org-html-themes github]]
#+begin_src 
add this at the top 
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

#+end_src

或者下载后用本地的模板 
#+begin_src 
# -*- mode: org; -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/sx/Dropbox/Sprache/Emacs/orgmode/org-html-themes/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/sx/Dropbox/Sprache/Emacs/orgmode/org-html-themes/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="/home/sx/Dropbox/Sprache/Emacs/orgmode/org-html-themes/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="/home/sx/Dropbox/Sprache/Emacs/orgmode/org-html-themes/styles/readtheorg/js/readtheorg.js"></script>


#+end_src
* org-reveal reveal.js & ox-reveal
need to download reveal-js(unzip, and path pass to org-reveal-root)
[[https:/github.com/hakimel/reveal.js/releases][reveal.js download ]]
need to download org-reveal(were replace by ox-reveal)
[[https://github.com/yjwen/org-reveal][org reveal]]
[[https://github.com/hexmode/ox-reveal/blob/master/Readme.org][ox reveal]]

#+begin_src 
#+OPTIONS: num:nil toc:nil
#+REVEAL_TRANS: None/Fade/Slide/Convex/Concave/Zoom
#+REVEAL_THEME: Black/White/League/Sky/Beige/Simple/Serif/Blood/Night/Moon/Solarized
#+Title: Title of Your Talk
#+Author: Your Name
#+Email: Your Email Address or Twitter Handle
#+end_src


#+BEGIN_SRC emacs-lisp  :tangle no
(use-package ox-reveal
:ensure t
:config
(require 'ox-reveal)
(setq org-reveal-root "file:///home/sx/Documents/emacs/reveal.js-3.9.2")
(setq org-reveal-mathjax t))

(use-package htmlize
:ensure t)

#+END_SRC


* org-msg
#+BEGIN_SRC 
- mbsync setting seeing in Dropbox
- C-c C-m to send email
- math :file output.png -> C-c C-c
- digraph ->
- graph --

#+END_SRC

* literatur Programm
** commands
|-------------+---------------------------------------------------------|
| <s Tab      | old version (require 'org-tempo) new version executable |
| C-c C-,     | new version                                             |
| C-c C-x C-v | view png of latex in SRC                                |
| C-c C-x C-l | view image of latex in pure orgmode                     |
| C-c '       | edit all src in a new buffer with mode                  |
|-------------+---------------------------------------------------------|
** options
src 前缀  
|----------------------------+--------------------------------------------|
| #+name: blockname          | blockname 可以被:noweb yes的代码块调用     |
| #+call :blockname(x = 3)   |                                            |
| #+PROPERTY: tangle xxx.tex | 全文所有相关码块导出到xxx.tex文件          |
| #+PROPERTY: comments org   | 全文org格式内容（不在src块中）导出时被注释 |
|                            |                                            |
|----------------------------+--------------------------------------------|

src 后缀
|------------------------+------------------------------------------|
| language               | function                                 |
| C/python/emacs-lisp    |                                          |
| :file abc.org          |                                          |
| :dir                   | 指定生成代码的路径                                |
| :results output        |                                          |
| :export   (到html文件) | code 只导出代码，results 只是结果 ，both |
| :session  my           | 可切换到生成的my buffer 操作             |
| :tangle  (创建源码）   | 文件名，yes, no                          |
| :noweb yes             | 对tangle和export作用                     |
| :tangle   xxx.py       | 输出文件                                 |
| :var  x=2              |                                          |
| :shebang               | 指定码块的解释器                         |
|                        |                                          |
|------------------------+------------------------------------------|

noweb:可以使用任何设定了名字的代码块，每次都是重新执行一遍所有相关代码。
session:后台会启动一个相应的解释器控制台，所有名称相同的代码块都会被加
载到该控制台，一直运行，并可以交互。
** ditaa
sudo apt-get install ditaa
C-c C-x C-v to view
#+begin_src ditaa :file foto/ditaa1.png
+---------+
|         |
| 1       |
|         |
+----+----+---+
|222 |233     |
|    |        |
+----+--------+

#+end_src

#+RESULTS:
[[file:foto/ditaa1.png]]




#+begin_src ditaa :file foto/ditaa2.png
+------+   +-----+   +-----+   +-----+
|{io}  |   |{d}  |   |{s}  |   |cBLU |
| 2oo  +---+ Bar +---+ Baz +---+ Moo |
|      |   |     |   |     |   |     |
+------+   +-----+   +--+--+   +-----+
                        |
           /-----\      |      +------+
           |     |      |      | c1AB |
           | Goo +------+---=--+ Sh12 |
           \-----/             |      |
                               +------+
#+end_src

#+RESULTS:
[[file:foto/ditaa2.png]]
** graphviz
sudo apt install graphviz
#+BEGIN_SRC  dot :file foto/digraphmt.png
  digraph diagramm {
          MG [shape= box,color = red]
          MG1 [shape=box,color=red]        
          lambdaL1 [color=red]
          ROOT [shape=diamond]
          ROOT2 [shape=diamond]

          mh2 -> MG;
          mh3 -> MG;
          lambdaL1->MG;
          MG -> cs1[label = "pp>h2h2j"];
          cs1 -> ROOT[label = "w"];
          MG -> data_file;
          data_file -> Events_file [label = "1"];
          Events_file -> ROOT;
          ROOT -> sigma1;
          sigma1 -> lambdaL2[label = "2"];
          lambdaL2 -> MG1;	
          MG1->cs2;
          cs2 -> ROOT2[label = "w"];
          MG1 -> data_file_1;
          data_file_1 -> ROOT2 [label = "1"];
          ROOT2 -> sigma2;
          sigma2 -> lambdaL;

}
#+END_SRC

#+RESULTS:
[[file:foto/digraphmt.png]]
** math
*** equation
#+BEGIN_SRC latex :file ~/Pictures/latex-math-1.png
\begin{eqnarray*}
\hat{f}(x) & \propto & \sum_{\nu} \frac{|F(\nu)H(\nu)|^2}{|N(\nu)|^2}  
           \frac{G(\nu)}{H(\nu)} e^{\frac{2 \pi i \nu x}{N}}\\
           & \propto & \sum_{\nu} \frac{|F(\nu)|^2}{|N(\nu)|^2} H(\nu) H^*(\nu) 
           \frac{G(\nu)}{H(\nu)} e^{\frac{2 \pi i \nu x}{N}}\\
           & \propto & \sum_{\nu} H^*(\nu) G(\nu) e^{\frac{2 \pi i \nu x}{N}}
\end{eqnarray*}

#+END_SRC

*** Matrix
#+begin_src latex   :file :file ~/Pictures/functionOfMatrix.png 
\begin{equation}
  s_{kk'}=
  \left(
  \begin{array}{ccc}
          h_{1k} &
          \cdots &
          h_{nk}
  \end{array}
  \right)
  \left(
  \begin{array}{ccc}
          \bar{q}_{11} & \cdots & \bar{q}_{12}\\
          \vdots & \ddots & \vdots\\
          \bar{q}_{n1} & \cdots & \bar{q}_{n2}
  \end{array}
  \right)
  \left(
  \begin{array}{c}
          h_{1k'} \\
          \vdots \\
          h_{nk'}
 \end{array}
 \right)
\end{equation}
#+end_src


$$
\begin{equation}
  s_{kk'}=
  \left(
  \begin{array}{ccc}
          h_{1k} &
          \cdots &
          h_{nk}
  \end{array}
  \right)
  \left(
  \begin{array}{ccc}
          \bar{q}_{11} & \cdots & \bar{q}_{12}\\
          \vdots & \ddots & \vdots\\
          \bar{q}_{n1} & \cdots & \bar{q}_{n2}
  \end{array}
  \right)
  \left(
  \begin{array}{c}
          h_{1k'} \\
          \vdots \\
          h_{nk'}
 \end{array}
 \right)
\end{equation}
$$
** parentheses
set  $$ X = \left( \begin{aligned}  aa \\ bb\\cc  \end{aligned} \right) $$
** Tabelle

#+BEGIN_SRC latex :file ~/Pictures/table.png
  \begin{table}[htbp]
  \centering
  \begin{tabular}{|c|c|c|}
  Überschrift 1 & Überschrift 2 & berschrift 3 \\
  \hline
  Eins & Zwei & Drei \\
  Vier & Fünf & Sechs \\
  \end{tabular}
  \caption[Tabelle]{Tolle Tabelle}
  \label{tab:toll1}
  \end{table}
#+END_SRC
** Special characters
#+BEGIN_SRC 

 latex-math-preview-insert-mathematical-symbol
this is to add special characters for latex
#+END_SRC
** Formation


添加大括号
#+begin_src 
\begin{cases}
\end{cases}
#+end_src

增加分行
#+begin_src 
\begin{aligned}
\end{aligned}
#+end_src

在orgmode中，Esc下面的~键可以调出希腊字母输入
C-z也可以调出特殊字符输入
#+begin_src 
$\mathcal{L}$
$\mathcal{B}$
#+end_src

$\mathcal{L}$
$\mathcal{B}$
** Compile Python2
#+BEGIN_SRC 
1. in Orgmode using SRC to save a python2 programm, with its interpreter
2. C-c ' opening the buffer
3. C-c C-p open the python interpreter, weather it is wanted
4. mark the region in programm buffer
5. C-c C-r import the marked region to the interpreter

#+END_SRC
** execute Program
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     ;;     (ipython . t)
     (emacs-lisp . t)
     (java . t)
     (shell . t)
     (sql . t)
     (C . t)
     (js . t)
     (ditaa . t)
     (haskell . t)
     (dot . t)
     ;;   (ein . t)
     (org . t)
     (latex . t )
     ;;     (html . t)
     ))
  (with-eval-after-load 'org)
#+END_SRC
#+RESULTS:
* C/C++
#+BEGIN_SRC emacs-lisp
    (use-package cmake-ide
    :ensure t
    :config
    (cmake-ide-setup))

#+END_SRC

** Irony
sudo apt install: cmake, clang, (or libclang), libclang-dev
M-x: irnoy-server-install
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (with-eval-after-load 'company
    (add-hook 'company-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-irony-c-headers
    :ensure t)






  (use-package flycheck-irony
    :ensure t
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))

  (use-package irony-eldoc
    :ensure t
    :config
    (add-hook 'irony-mode-hook #'irony-eldoc))


#+END_SRC

#+RESULTS:
: t

* Python
** python  
M-x : package install : company-anaconda
#+BEGIN_SRC emacs-lisp
  ;;conda for emacs
  (add-hook 'python-mode-hook 'anaconda-mode)


  (use-package python
    :ensure t
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (setq indent-tabs-mode nil)
    (setq python-indent-offset 4)
    (use-package py-autopep8
      :ensure t
      :hook ((python-mode . py-autopep8-enable-on-save))
      ))

  (use-package company-jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook (lambda ()
                                  (add-to-list (make-local-variable 'company-backends) 'company-jedi))))


;  (exec-path-from-shell-copy-env "PYTHONPATH")
  (setq py-python-command "python")
  ;;(setq python-shell-interpreter "python")


  (use-package elpy
    :ensure t
    :commands (elpy-enable)
    :config
    (setq elpy-rpc-backend "jedi"))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))


#+END_SRC

#+RESULTS:
| lsp | anaconda-mode | py-autopep8-enable-on-save | (lambda nil (add-to-list (make-local-variable (quote company-backends)) (quote company-jedi))) | jedi:setup |

** notebook-jupyter
conda activate tf ( one virual envirment of conda)
emacs xxx.ipynb
C-c C-o ( open the the ipython mode)

official link [[https://tkf.github.io/emacs-ipython-notebook/#][document]]
emacs ipython notebook [[https://github.com/millejoh/emacs-ipython-notebook][github link]]
*** Install
M-x package-refresh-contents RET
M-x package-install RET ein RET

emacs xxx.ipynb 
C-c C-l/o
*** commands
|---------+---------------------------------------------+--------------------|
| C-c C-a | ein:worksheet-insert-cell-above-km          | 向上插入cell       |
| C-c C-b | ein:worksheet-insert-cell-below-km          | 向下插入cell       |
| C-c C-c | ein:worksheet-execute-cell-km               | 执行cell           |
| C-c C-k | ein:worksheet-kill-cell-km                  | kill cell          |
| C-c C-s | ein:worksheet-split-cell-at-point-km        | 划分cell           |
| C-c C-w | ein:worksheet-copy-cell-km                  | 复制cell           |
| C-c C-l | ein:worksheet-clear-output-km               | 清除结果           |
| C-c C-u | ein:worksheet-change-cell-type-km           | 更换属性cell       |
| C-c C-z | ein:notebook-kernel-interrupt-command-km    | 中断cell           |
| C-c C-y | ein:worksheet-yank-cell-km                  | yank cell          |
| C-c RET | ein:worksheet-merge-cell-km                 | 向上融合cell       |
| C-c C-f | ein:file-open-km                            | 打开文件           |
| M-Ent   | ein:worksheet-execute-cell-and-goto-next-km | execute, goto next |
|         |                                             |                    |
|---------+---------------------------------------------+--------------------|
<C-down>     ein:worksheet-goto-next-input-km
<C-up>               ein:worksheet-goto-prev-input-km


|-------------+------------------------------------------------|
| C-u C-c C-c | ein:worksheet-execute-all-cells                |
| C-c C-e     | ein:worksheet-toggle-output-km                 |
| C-c C-n     | ein:worksheet-goto-next-input-km               |
| C-c C-o     | ein:notebook-open-km                           |
| C-c C-p     | ein:worksheet-goto-prev-input-km               |
| C-c C-q     | ein:notebook-kill-kernel-then-close-command-km |
| C-c C-r     | ein:notebook-reconnect-session-command-km      |
| C-c C-t     | ein:worksheet-toggle-cell-type-km              |
| C-c C-v     | ein:worksheet-set-output-visibility-all-km     |
| C-c C-x     | Prefix Command                                 |
|-------------+------------------------------------------------|

* Javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:ensure ac-js2
:init
(progn
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
))

(use-package js2-refactor
:ensure t
:config
(progn
(js2r-add-keybindings-with-prefix "C-c C-m")
;; eg. extract function with `C-c C-m ef`.
(add-hook 'js2-mode-hook #'js2-refactor-mode)))
(use-package tern
:ensure tern
:ensure tern-auto-complete
:config
(progn
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;;(tern-ac-setup)
))

;;(use-package jade
;;:ensure t
;;)

;; use web-mode for .jsx files
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))


;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)

;; customize flycheck temp file prefix
(setq-default flycheck-temp-prefix ".flycheck")

;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))


#+END_SRC

* Haskell
** haskell mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
  :ensure t
  :config
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  )
#+END_SRC
** jupyter ihaskell
[[https://github.com/gibiansky/IHaskell][install step 1]]
[[https://github.com/kxxoling/blog/blob/master/haskell/ihaskell.md][install step 2]]

** babel haskell in src
#+begin_src emacs-lisp
  ;;; babel_haskell.el --- babel for haskell in src    -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  sx

  ;; Author: sx <sx@sx>
  ;; Keywords: tools, abbrev


  (defun send-to-haskell/file-with-buffer (file-name buffer)
    "Load FILE-NAME in a REPL session and associate it with BUFFER."
    (haskell-interactive-mode-reset-error (haskell-session))
    (haskell-process-file-loadish
     (format "load \"%s\"" (replace-regexp-in-string
                            "\""
                            "\\\\\""
                            file-name))
     nil
     buffer))

  (defun send-to-haskell/org-src-block (&optional arg)
    "Tangle the current Org mode source block and load it in a REPL session.
  With one universal prefix argument, only tangle the block at point."
    (interactive "P")
    (let* ((src-block
            (cond ((string= major-mode "org-mode")
                   ;; In an Org mode buffer, is the cursor in a source block?
                   (let ((info (org-babel-get-src-block-info t)))
                     (if info
                         (list info nil (current-buffer))
                       nil)))
                  (org-src-mode
                   ;; In a transient source code buffer.
                   (list org-src--babel-info (current-buffer)
                         (org-src--source-buffer)))
                  (t
                   ;; Not in an Org mode source block or transient code buffer.
                   nil)))
           (is-haskell-src
            (and src-block (string= "haskell" (nth 0 (nth 0 src-block))))))
      (unless is-haskell-src
        (user-error "Not in a Haskell source code block"))
      (when is-haskell-src
        (let* ((info (nth 0 src-block))
               (code-buffer (nth 1 src-block))
               (org-buffer (nth 2 src-block))
               (lang (nth 0 info))
               (contents (nth 1 info))
               (params (nth 2 info))
               (tangle-to (cdr (assq :tangle params)))
               (posn (nth 5 info)))
          ;; Tangle the relevant code block(s) and get the tangled file name.
          (let ((out-file
                 (cond ((string= tangle-to "no")
                        ;; Tangle this *single block* to a temporary file
                        (let* ((tmp-prefix "haskell-load-")
                               (tmp-suffix ".hs")
                               (tmp-file (concat
                                          (org-babel-temp-file tmp-prefix)
                                          tmp-suffix)))
                          (with-current-buffer org-buffer
                            (goto-char posn)
                            (let ((tangled-files
                                   (org-babel-tangle '(4) tmp-file)))
                              (message "Tangled: %s" tangled-files)
                              (nth 0 tangled-files)))))
                       (t
                        ;; Tangle all relevant blocks to a specified file
                        (with-current-buffer org-buffer
                          (goto-char posn)
                          ;; If `arg' is '(4), only tangle this single block.
                          (let* ((arg (if (equal arg '(4)) '(4) '(16)))
                                 (tangled-files
                                  (org-babel-tangle arg "haskell")))
                            (message "Tangled: %s" tangled-files)
                            (nth 0 tangled-files)))))))
            ;; Now visit this tangled file and load it in ghci.
            (if code-buffer
                ;; There is an existing code buffer, use a temporary buffer to
                ;; visit the tangled file.
                (with-temp-buffer
                  (insert-file-contents out-file t)
                  (send-to-haskell/file-with-buffer out-file code-buffer))
              ;; No existing code buffer, visit the file normally.
              ;; Set `NOWARN' to `t' to avoid prompting the user to reread the
              ;; file if the contents (on disk) have changed.
              (let ((tangled-buffer (find-file-noselect out-file t)))
                (with-current-buffer tangled-buffer
                  ;; Ensure the buffer name starts and ends with an asterisk.
                  (let ((buf-name (buffer-name)))
                    (unless (and (string-prefix-p "*" buf-name)
                                 (string-suffix-p "*" buf-name))
                      (rename-buffer (concat "*" buf-name "*"))))
                  (send-to-haskell/file-with-buffer out-file tangled-buffer))))
            nil)))))

#+end_src

** commands to excute haskell
*** in file.hs
C-c C-l  to execute file.hs and go to interactive environment 
Seeing ./black.hs
*** C-c C-c call in src
#+begin_src haskell   :results value :eval (inferior-haskell-start-process)
#+begin_src haskell  :results value :eval (inferior-haskell-start-process)
  log2 :: Float -> Float
    log2 = logBase 2
    log2 43

#+end_src

#+RESULTS:
: Prelude> 5.426264754702098

#+end_src
in src can multi functions be defined. and the last call will be printed

with follow extension, can be easy C-c C-c executed, but not in send
to haskell log file, but only output the last result


Seeing Literatur Programm Grundlage
*** send to haskell/org-src-block

#+begin_src haskell
#+begin_src haskell  :results value :eval (inferior-haskell-start-process)
  log2 :: Float -> Float
    log2 = logBase 2
    log2 43

#+end_src



#+end_src

first to load file. ~/.emacs.d/packages/orgmode-babal-haskell.el
in one of src block M-x : send to haskell/org-src-block

in src block  without any extension can be load in send buffer(after
_src haskell), and the be called function can be many type.
 
important : in src block the calling syntax is NOT allowed

Seeing Literatur Programm Alternativen

* html
** web-mode
M-x: package install ob-html-chrome
#+BEGIN_SRC emacs-lisp
      ;;;;;;;;;;;;;;
      ;emmet-mode
      ;;;;;;;;;;;;;
      (require 'emmet-mode)
      (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'html-mode-hook 'emmet-mode)
      (add-hook 'web-mode-hook 'emmet-mode)
      (add-hook 'css-mode-hook  'emmet-mode)


      ;;;;;;;;;;;;;;
      ;web-mode
      ;;;;;;;;;;;;;;;
      (require 'web-mode)
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (defun my-web-mode-hook ()
        "Hooks for Web mode."
        (setq web-mode-markup-indent-offset 2)
      )
      (add-hook 'web-mode-hook  'my-web-mode-hook)

#+END_SRC

#+RESULTS:
: ob-html-chrome

** ob-browser
#+begin_src emacs-lisp

      (add-to-list 'exec-path "/opt/local/bin")
      (setenv "PATH" (mapconcat 'identity exec-path ":"))

#+end_src
https://github.com/krisajenkins/ob-browser

** html fold
#+begin_src emacs-lisp
(autoload 'html-fold-mode "html-fold" "Minor mode for hiding and revealing elements." t)
(add-hook 'html-mode-hook 'html-fold-mode)
#+end_src

#+RESULTS:
| html-fold-mode | emmet-mode |

