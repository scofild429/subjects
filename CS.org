#+TITLE:  Informatik
#+OPTIONS: num:nil
#+SETUPFILE: /home/silin/.emacs.d/org-html-themes/org/theme-bigblow.setup
#+startup: overview
* Functional Programm of Haskell
** Grundlage
basic function call
#+begin_src haskell  :results value :eval (inferior-haskell-start-process)
  log2 :: Float -> Float
  log2 = logBase 2
log2 43

#+end_src

#+RESULTS:
: Prelude> 5.426264754702098

implication
#+begin_src haskell  :results value :eval (inferior-haskell-start-process)

  (==>):: Bool -> Bool -> Bool
  a ==> b = not a || not b
Flase ==> True
False==> False
True ==> True

#+end_src

#+RESULTS:
: False

--euler numbers
#+begin_src haskell  :results value :eval (inferior-haskell-start-process)

  e:: Float
    e = exp 1
e 
#+end_src

#+RESULTS:
: 2.718281828459045

** Pattern Matching

one of the calling must match one case of pattern
#+begin_src haskell 
  (<#>) :: Bool -> Bool -> Bool
    (<#>) False False = False
    (<#>) False True = True
    (<#>) True False = True
    (<#>) True True = True


  True <#> True
    #+end_src

#+RESULTS:
: Prelude> Prelude> Prelude> Prelude> Prelude> Prelude> True


#+begin_src  haskell  :results value :eval (inferior-haskell-start-process)

  (<#>) :: Bool -> Bool -> Bool
    (<#>) True True = True
    (<#>) _ _ = False

  (<#>) True True
  (<#>) False True

#+end_src

#+RESULTS:
: False

#+begin_src haskell
  (<#>) :: Bool -> Bool -> Bool
    (<#>) True True = True

#+end_src

case : this can only be executed in a .hs file,
 in orgmode can NOT be imported, I don't know what is going on
 in Terminal can NOT also

Here I made above mistake, this is no sense.
so long the indentation is correct, so works

#+begin_src haskell 
  (<#>) :: Bool -> Bool -> Bool
  (<#>) a b
    | a == b = False
    | otherwise = True


#+end_src

** Alternativen

if else then
#+begin_src haskell 
  absolute :: Int -> Int
  absolute x = if x < 0 then -x else x

#+end_src

** Recursion
easy fib
#+begin_src haskell
  heronA ::(Int, Double) -> Double
  heronA (n,a)
    | n > 0     = (heronA(n-1,a) + a/heronA(n-1, a))/2
    | otherwise = a

  absolute :: Int -> Int
  absolute x = if x < 0 then -x else x

  heronB :: Int -> Double -> Double
  heronB n a
    | n > 0     = (heronB (n-1) a + a/heronB(n-1) a)/2
    | otherwise = a

#+end_src


where 
#+begin_src haskell
  heronC :: Int -> Double -> Double
  heronC n a
    |n > 0      = (x + a/x)/2
    |otherwise  = a
    where x = heronC (n-1) a
#+end_src

fib & where

#+begin_src haskell
  fibA :: Int -> Int
  fibA n
    |n == 0    = 0
    |n == 1    = 1
    |otherwise = x +y
    where
      x = fibA (n-1)
      y = fibA (n-2)
 
#+end_src

fib & where & pattern matching

#+begin_src  haskell
  fibB :: Int -> Int
  fibB 0 = 0
  fibB 1 = 1
  fibB n = fibB (n-1) + fibB (n-2)


  fibC :: Int -> Int
  fibC 0 = 0
  fibC 1 = 1
  fibC n
    | n < 0      = error "illegal arguement"
    | otherwise  = fibB (n-1) + fibB (n-2)


  (<##>) :: Int -> Double -> Double
  0 <##> a   = a
  n <##> a  
    | n > 0  = (x + a/x)/2
    | otherwise  = error "illegal arguement"
    where x = (n-1) <##> a
#+end_src

** type conversion

Guides
#+begin_src haskell
  vielleichtdreifach :: Bool -> Bool -> Integer -> Integer
  vielleichtdreifach verdreifach nochmal n
    | verdreifach && nochmal = maldrei ( maldrei n)
    | verdreifach            = maldrei n
    | otherwise              = n
    where maldrei n = 3*n 

  dreifach :: Integer -> Integer
  dreifach = vielleichtdreifach True False 

  neudreifach :: Integer -> Integer
  neudreifach = vielleichtdreifach True True

#+end_src
vielleichtdreifach Bool Bool -> Integer

** Factorial
#+begin_src haskell
  fac :: Integer -> Integer
  fac n
    | n == 0  = 1
    | otherwise = fac (n-1) * n
#+end_src

** Stern Brocot Floge

$\\s_{0} = 0 \\ s_{1} = 1 \\ s_{2n} = s_{n} \\ s_{2n+1} = s_{n} + s_{n+1}$

#+begin_src  haskell
  (*/*) :: Integer -> Integer -> Integer
  (*/*) = div

  (*%*) :: Integer -> Integer -> Integer
  (*%*) = rem

  sternBrocot :: Integer -> Integer
  sternBrocot n
    | n == 0      = 0
    | n == 1      = 1
    | n *%* 2 == 0 = sternBrocot half
    | otherwise    = sternBrocot half + sternBrocot (half + 1)
    where half = n */* 2

  suche :: Integer -> Integer -> Integer
  suche suchziel postionziel
    | sternBrocot postionziel > suchziel = postionziel
    | otherwise                          = suche suchziel (postionziel +1)

#+end_src

* Schaltnetze
** COMMENT Gatter und Haskell
NOT AND OR NAND NOR

let can not as sentence  use alone, but can be as a part in main

#+begin_src haskell
  table_row :: ([Bool] -> Bool) -> [Bool] -> String
  table_row f xs = show xs ++ " : " ++ show(f xs)

  table :: ([Bool] -> Bool) -> [[Bool]] -> String
  table f xs
    |xs == [] = ""
    |otherwise = table_row f (head xs) ++ " \n " ++ table f (tail xs)

  main = do
    let boool_tri = [[ a,b,c ] | a <- [True, False, False],
                    b <- [False, True, False],
                    c <- [False, True, True]]

    putStrLn (table and boool_tri)


  tableA :: ([Bool] -> Bool) -> [[Bool]] -> String
  tableA f [] = ""
  tableA f (x:xs) = table_row f x ++ " \n  "++ tableA f xs
#+end_src

* Hash

Verlastungsfaktor  \[ \alpha = \frac{n}{m} ]\
n : elementen
m : Hash Blukets

For Kollision
Offenes Hash :  mit verkertete List
Universumes Hash : mit ein hash famliy function
Geschlossens Hash : die weiter hash bluket besiten
verdoppelungsstrategie : verkleinen order vergrossen die Hash Blukets

* P & NP
** def
|-----------------+----+----------------------------------------------------------------------------|
| P problem       | {L | Es gibt ein Polynom p(n) und eine p(n)-Zeitbeschrankte DTM m mit L=L(m)}   |
| NP problem      | {L | Es gibt ein Polynom p(n) und eine p(n)-Zeitbeschrankte NTM m mit L=L(m)}   |
| ExpTime problem | {L | Es gibt ein Polynom p(n) und eine 2^p(n)-Zeitbeschrankte DTM m mit L=L(m)} |
|-----------------+----+----------------------------------------------------------------------------|

Rudction
Many-one-Rudction : alle  P Problem konnen auf one Problem reduzieren.

** NP

SAT <- 3SAT <- 3 Farbarkeit
            <- Clique
            <- Independent Set
            <- Vertex Set
            Pa

* Algotithm
** Komplexitätstheorie
*** Maximum Sequence Problem Beispile

|-----+---------------+----------------------------------------------------------|
| A1. | $O(n^3)$      | Erschöpfende Suche/ Brute-Force-Suche/ Exhaustive Search |
|-----+---------------+----------------------------------------------------------|
| A2. | $O(n^2)$      | Zwischen Prozessen mehr anwenden                         |
|-----+---------------+----------------------------------------------------------|
| A3. | $O(n \log n)$ | Rekursive                                                |
|-----+---------------+----------------------------------------------------------|
| A4. | $O(n)$        | Max Maxsuffix                                            |
|-----+---------------+----------------------------------------------------------|

*** Landau Symbols

\[ f = O(g) \leftrightarrow g = \Omega(f) \leftrightarrow \lim_{x \to
\infty} Sup|\frac{f(x)}{g(x)}| < \infty \]

\[ f = \Omega(g) \leftrightarrow g = O(f) \leftrightarrow \lim_{x \to
\infty} Inf|\frac{f(x)}{g(x)}| > 0 \]

\[ f = \Theta(g) \leftrightarrow g = \Theta(f) \leftrightarrow 0< \lim_{x \to
\infty} Inf|\frac{f(x)}{g(x)}| < \lim_{x \to \infty} Sup|\frac{f(x)}{g(x)}| < \infty \]

*** Master Theorem

In a Recursive process, we can form this,  \[ T_n = a \cdot T(\frac{n}{b}) + f(n) \],
for  $a \geq 1$, $b \geq 1$. T 代表递归符号,   a: 每次递归成几个部分,
n/b: 递归后每个部分的问题规模,  f(n): 递归后将所有部分融合的步骤, 作如
下变换：

$$ n^d = f(n) = O(n^{\log_b^a-\epsilon}) \\
   n^d = f(n)  \ge n^{\log_b^a-\epsilon} \\
   d \ge \log_b^a - \epsilon \\
   d \ge \log_b^a
$$
如果$\log_b^b$ 在减去一个存在的 \epsilon 后仍然大于d, 则 ：$T_n = \Theta (n^{\log_b^a})$.


$$
  n^d = f(n) = \Theta (n^{\log_b^a}) \\
  n^d = f(n)  = n^{\log_b^a} \\
  d = \log_b^a
$$
如果$\log_b^a 恒等于 d, 则： $T_n = \Theta (n^{\log_b^a} \cdot \lg^n)$


$$
   n^d = f(n) = \Omega(n^{\log_b^a+\epsilon}) \\
   n^d = f(n)  \le n^{\log_b^a+\epsilon} \\
   d \le \log_b^a +\epsilon \\
   d \le \log_b^a
$$
如果$\log_b^b$ 在加上一个存在的 \epsilon 后仍然小于d, 则 ：$T_n = \Theta (f(n))$.

** Tree Theorem
*** Vorgänger(u)

|--------------------+------------------+-------------------------------------|
| if least(root) = u |                  | no Vorgänger                        |
|--------------------+------------------+-------------------------------------|
| if u.L exits       |                  | greatest(u.L)                       |
|--------------------+------------------+-------------------------------------|
| if u.L not exits   | u is right child | father node                         |
| if u.L not exits   | u is left child  | (grand)father which has right child |
|--------------------+------------------+-------------------------------------|

*** Nachfolger(v)

|-----------------------+------------------+------------------------------------|
| if greatest(root) = v |                  | no Nachfolger                      |
|-----------------------+------------------+------------------------------------|
| if v.R exits          |                  | least(u.L)                         |
|-----------------------+------------------+------------------------------------|
| if v.R not exits      | v is left child  | father node                        |
| if v.R not exits      | v is right child | (grand)father which has left child |
|-----------------------+------------------+------------------------------------|
* Advanced Algorithms
** Master theorem
** Maximum increasing Subsequence
It has three different solution,
*** LCS C++
*** LCS python
*** Dynamic program C++
#+begin_src C++ :results output
#include <iostream>  
using namespace std;  
#define len(a) (sizeof(a) / sizeof(a[0])) //数组长度  
int lis(int arr[], int len)  
{  
    int longest[len];  
    for (int i=0; i<len; i++)  
        longest[i] = 1;  
  
    for (int j=1; j<len; j++) {  
        for (int i=0; i<j; i++) {  
            if (arr[j]>arr[i] && longest[j]<longest[i]+1){ //注意longest[j]<longest[i]+1这个条件，不能省略。  
                longest[j] = longest[i] + 1; //计算以arr[j]结尾的序列的最长递增子序列长度  
            }  
        }  
    }  
  
    int max = 0;  
    for (int j=0; j<len; j++) {  
        cout << "longest[" << j << "]=" << longest[j] << endl;  
        if (longest[j] > max) max = longest[j];  //从longest[j]中找出最大值  
    }  
    return max;  
}  
  
int main()  
{  
    int arr[] = {1, 4, 5, 6, 2, 3, 8}; //测试数组  
    int ret = lis(arr, len(arr));  
    cout << "max increment substring len=" << ret << endl;  
    return 0;  
}  
#+end_src

#+RESULTS:
: longest[0]=1
: longest[1]=2
: longest[2]=3
: longest[3]=4
: longest[4]=2
: longest[5]=3
: longest[6]=5
: max increment substring len=5

*** Dynamic Program Python
#+begin_src python :results output
list1 = [2, 1, 3, 45, 76, 89, 457, 54, 4, 5, 3, 6, 7, 8, 4, 9]
l = len(list1)
a = [1]*l
b = [[] for x in range(l)]


for i in range(l):
    for j in range(i):
        if (list1[i] > list1[j]) and (a[i] < (a[j] + 1)):
            a[i] = a[j]+1
            b[i].append(list1[j])
    b[i].append(list1[i])

print(a)
maxa = a.index(max(a))
print("the maximun length of LIS of list1 is {}".format(max(a)))
print("the LIS is {}".format(b[maxa]))


#+end_src

#+RESULTS:
: [1, 1, 2, 3, 4, 5, 6, 4, 3, 4, 2, 5, 6, 7, 3, 8]
: the maximun length of LIS of list1 is 8
: the LIS is [2, 3, 4, 5, 6, 7, 8, 9]

*** O(nlogn) method C++
#+begin_src C++ :results output
#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  

#define N 9 //数组元素个数  
int array[N] = {2, 1, 6, 3, 5, 4, 8, 7, 9}; //原数组  
int B[N]; //在动态规划中使用的数组,用于记录中间结果,其含义三言两语说不清,请参见博文的解释  
int len; //用于标示B数组中的元素个数  

int LIS(int *array, int n); //计算最长递增子序列的长度,计算B数组的元素,array[]循环完一遍后,B的长度len即为所求  
int BiSearch(int *b, int len, int w); //做了修改的二分搜索算法  

int main()  
{
    
  printf("LIS: %d\n", LIS(array, N));  
      
  int i;  
  for(i=0; i<len; ++i)  
    {  
      printf("B[%d]=%d\n", i, B[i]);  
    }  

  return 0;  
}  

int LIS(int *array, int n)  
{  

  len = 1;  
  B[0] = array[0];  
  int i, pos = 0;
  int *lis =(int *) malloc(n*sizeof(int));
      
  lis[0] = array[0];
  for(i=1; i<n; ++i)  
    {  
      if(array[i] > B[len-1]) //如果大于B中最大的元素，则直接插入到B数组末尾  
	{  
	  B[len] = array[i];  
	  ++len;
	  lis[i] = array[i]; 
	}  
      else  
	{  
	  pos = BiSearch(B, len, array[i]); //二分查找需要插入的位置
	  lis[pos] = array[i];
	  B[pos] = array[i];  
	}
    }  

  printf("the LIS is :\n");
  for (int i = 0; i < n; ++i) {
    printf("%d ",lis[i]);
  }
  free(lis);
  printf(" \n");
  
  return len;  
}  

//修改的二分查找算法，返回数组元素需要插入的位置。  
int BiSearch(int *b, int len, int w)  
{  
  int left = 0, right = len - 1;  
  int mid;  
  while (left <= right)  
    {  
      mid = left + (right-left)/2;  
      if (b[mid] > w)  
	right = mid - 1;  
      else if (b[mid] < w)  
	left = mid + 1;  
      else    //找到了该元素，则直接返回  
	return mid;  
    }  
  return left;//数组b中不存在该元素，则返回该元素应该插入的位置  
}  




#+end_src

#+RESULTS:
: the LIS is :
: 1 3 4 7 5 0 8 0 9  
: LIS: 5
: B[0]=1
: B[1]=3
: B[2]=4
: B[3]=7
: B[4]=9


*** O(nlogn) method Python
#+begin_src python :results output
list1 = [2, 1, 3, 4, 5, 3, 6, 7, 8, 4, 9]
l = len(list1)


def getpos(list2, n, x):  # binary search of postion
    left = 0
    right = n-1
    while (left <= right):
        mid = int(left + (right-left)/2)
        if x < list1[mid]:
            right = mid-1
        elif x > list1[mid]:
            left = mid + 1
        else:
            return mid
    return left


c = [list1[0]]  # copy the first element to c

for i in range(1, l):
    if c[-1] < list1[i]:  # if the new element is bigger than the last c, add it
        c.append(list1[i])
    else:
        pos = getpos(c, len(c), list1[i])  # if not, find the right pos
        c[pos-1] = list1[i]

print(c)

#+end_src

#+RESULTS:
: [1, 3, 4, 5, 6, 7, 8, 9]

** maximum submatrix
***  Brute force solution Python
#+begin_src python :results output
  import random
  l = 6
  a = [[]]*l
  gsm = [[]]*l
  for i in range(l):
      a[i] = [random.randint(-5, 5) for x in range(l)]

  print("Original random matrix  \n")
  for i in range(l):
      for j in range(l):
          print("{:>4d}".format(a[i][j]), end="")
      print("\n")

  max = 0

  # distance between x dimension of submatrix
  for i in range(1, l):
      for xstart in range(i-1, l):                            # x start  of submatrix
          for xstop in range(i+xstart, l+1-i+1):              # x stop    of submatrix
              # distance between y dimension of submatrix
              for j in range(1, l):
                  for ystart in range(j-1, l):                 # y start of submatrix
                      for ystop in range(j+ystart, l+1-j+1):   # y stop of submatrix
                          lip = [[] for x in range(l)]
                          count = 0
                          for x in range(xstart, xstop):
                              for y in range(ystart, ystop):
                                  lip[x].append(a[x][y])
                                  count += a[x][y]
                          if count > max:
                              lipmax = [[] for x in range(l)]
                              max = count
                              lipmax = lip
  print("maximux submatrix :\n")
  for i in range(len(lipmax)):
      print("\n")
      for j in lipmax[i]:
          print("{:>4d}".format(j), end="")

  print("\n")
  print("The summary is ", max)

#+end_src

#+RESULTS:
#+begin_example
Original random matrix  

   5   4  -4   3   4   4

   4  -5  -4  -2  -5  -4

   2  -2   4  -2  -3  -1

  -3   5   4   1   4  -2

   0  -4  -2  -1   4   2

  -3   4  -2   5  -1   0

maximux submatrix :









   5   4   1   4

  -4  -2  -1   4

   4  -2   5  -1

The summary is  17
#+end_example

            
