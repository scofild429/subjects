#+TITLE: Linux
#+OPTIONS: num:nil
#+SETUPFILE: /home/silin/.emacs.d/org-html-themes/org/theme-bigblow.setup
#+startup: content

* Install 
** 系统盘恢复
#+BEGIN_SRC 
1. WIN+R diskpart
2. select disk (Disk)
3. clean
4. new add 
#+END_SRC
** 写入系统

1. 下载ubuntu 
2. 下载USBwriter并安装
3. 写入系

** 安装
#+BEGIN_SRC
my computer : F12
#+END_SRC
** Update nvidia drivers for linux
#+BEGIN_SRC 
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt update 
ubuntu-drivers devices
sudo apt-get --reinstall install nvidia-430
    1.  will be asked for password
    2.  reboot
    3.  select Enroll MOK -> continue -> Yes -> Roboot
nvidia-sim
watch -n 1 nvidia-smi
#+END_SRC

** chinese 
export LC_CTYPE=zh_CN.UTF-8
sudo apt-get -y install language-pack-zh-hans
此应用压制中英文的同步变化, 尽量避免使用中文
* System configuration collection
** open fire wall  for port
  add port :
  sudo firewall-cmd --add-port=80/tcp --permanent
  restart firewall:
  sudo  firewall-cmd --reload
  check port:
  sudo  firewall-cmd --list-all

** Shutdown Keyboard default
#+BEGIN_SRC 

1. $ xinput list 
   Find the Touchpad and its NAME and ID
2. $ xinput set-prop 'NAME' 'Device Enabled' 0
   to close the Touchpad
3. but with following can be named as tpOn and tpOff in ./bashrc
alias tpOff="xinput set-prop 'SYNA1D31:00 06CB:CD48 Touchpad' 'Device Enabled' 0"
alias tpOn="xinput set-prop 'SYNA1D31:00 06CB:CD48 Touchpad' 'Device Enabled' 1"
4. Close Touchpad default in boost system
   the following in ~/.config/autostart/xinput.desktop
#+END_SRC

#+BEGIN_SRC 
[Desktop Entry]
Type=Application
Exec=xinput set-prop 'SYNA1D31:00 06CB:CD48 Touchpad' 'Device Enabled' 0
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[zh_CN]=touchpad enable
Name=touchpad enable
#+END_SRC
** autostart
Thunderbird
#+begin_src 
[Desktop Entry]
Type=Application
Exec=/usr/bin/thunderbird
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[en_US]=thunderbird
Name=thunderbird
Comment[en_US]=thunderbird
Comment=thunderbird

#+end_src
** exchange Control Key and Caps Key

在/etc/default/keyboard文件中添加:
#+BEGIN_SRC 
XKBOPTIONS="ctrl:nocaps
#+END_SRC
or
#+BEGIN_SRC shell
setxkbmap -option ctrl:nocaps
#+END_SRC
setting for 右键没反应
$ sudo add-apt-repository universe
$ sudo apt install gnome-tweak-tool

** right key no response
#+BEGIN_SRC 
gsettings set org.gnome.desktop.peripherals.touchpad click-method areas
#+END_SRC

** hotkey

| C-M- t | terminal             |
| C-M- p | thunderbird          |
| C-M- e | emacs                |
| C-M- f | firefox              |
| C-M- j | emacs windows switch |
| C-M- t | terminal             |
| C-M- w | emacs worterbuch     |
| C-M- t | terminal             |
| C-M- t | terminal             |
|        |                      |



|---------------------------------+-----------|
| Switch application              | Alt + Tab |
| Switch window of an application | Alt + Spc |
|                                 |           |
|---------------------------------+-----------|

|--------------+----------|
| Alt Ctrl Del | 退出用户 |

in Einstellung, the executable command can be used in command for customized hotkey

** clear caches
put this in .bashrc under root file
#+begin_src sh
alias freemem="sync; echo 3 > /proc/sys/vm/drop_caches && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared' "
#+end_src
* commands
** file management

在~内找filename的文件
find ~ -name filename

找到.bash_history内带有"install"的内容
grep -n  "install" .bash_history

copy 110.txt to 111.txt
echo | cat 110.txt > 111.txt


> 擦除再写
>> 追加写入

读取.sdsv_history的不重复内容，再写入到.sdsv
echo | sort -n .sdsv_history |uniq > .sdsv

** directory operation
#+BEGIN_SRC 
tree -L 2
alias open='nautilus'
open .
#+END_SRC
** find uninstall and remove software
#+BEGIN_SRC 
sudo apt list --installed | grep software
whereis software
sudo apt-get --purge remove software
sudo apt-get autoremove
#+END_SRC
** su password config
sudo passwd :to configure the password of root user
** get IP address
curl ifconfig.me
** grep sort
grep -n "xxx" ./test.txt
sort (--reverse -t " " -k 3 ) test.csv
** soft link 
ln -s filename linkname // 快捷方式
filename加上绝对路径，linkname被移动后，仍能访问访问文件

** hard link
ln filename linkname   //硬链接
不占用磁盘空间，重复连接到文件的inode点。
可以在不同地方通过硬连接对文件进行操作

** cd to program with which
cd $(dirname $(which cling))

** awk 
 delete the repeat : awk '!a[$0]++' file.txt

* Useful Software
** fcitx for sougou
#+BEGIN_SRC 
1. sudo apt install fcitx
download sougou
2. sudo apt  --fix-broken install(after download)
3. export LC_CTYPE=zh_CN.UTF-8 (for Emacs)
#+END_SRC

** eog
#+BEGIN_SRC 
eog xxx.png to view png with bluit in software eog
#+END_SRC
** Okular
#+BEGIN_SRC 
sudo apt-get install okular
F2 to constimizer
F7 mode view
C-gg to the page
C-n page down
C-p page up
M-n scroll down
M-p scroll up
C-b C-b add Annoation, 1 to note
SPC-b add bookmark
SPC-SPC rename bookmark
SPC-n bookmark down
SPC-p bookmark up

#+END_SRC
** xournal
#+BEGIN_SRC  
sudo apt install xournal
#+END_SRC
** evince
#+BEGIN_SRC 
evince xxx.pdf to view pdf file

#+END_SRC
** stardict
#+BEGIN_SRC 
1 stardict 
2 sdcv
3 very useful  http://download.huzheng.org/

In GUI open with stardict
In terminal open with sdcv

#+END_SRC
** kmplayer
sudo apt install kmplayer
** simplescreenrecorder
#+BEGIN_SRC 

sudo apt install simplescreenrecorder
alias ssr='simplescreenrecorder'
$ ssr
Ctrl + Shift + Alt + V start or pause 

#+END_SRC
** Cvim
#+BEGIN_SRC 
C-j moive to left 
C-k moive to right

#+END_SRC
** hotopea
登陆photopea网站后，新建并上传图片
设置白色背景：图像 -> 调整 -> 色阶  点击下面的白色 后点击要处理的图片区域
去背景 ： 魔术棒 ， 点击去连续， 再直接delete
** manual png create png

after edit a file.dot

dot -Tpng -O file.dot

** gpg for secret

#+BEGIN_SRC 
gpg --list-secret-keys
gpg -r user -e xxx.file
gpg -d xxx.file.gpg
after change xxx.file :gpg --verify xxx.file.gpg

#+END_SRC

** ranger
apt install
** pdftk

[[http://www.pdflabs.com/docs/install-pdftk/][official web link]]

|------------------+-------------------------------------------------------------|
| 合并             | pdftk 1.pdf 2.pdf 3.pdf output 123.pdf                      |
| 多个不同页面合并 | pdftk A=1.pdf B=2.pdf C=pdf cat A1-2 B2-3 C3 output abc.pdf |
| 旋转第一页       | pdftk in.pdf cat 1E 2-end output out.pdf                    |
| 加密（128位）    | pdftk a.pdf output b.pdf owner_pw pass                      |
| 加访问密码       | pdftk a.pdf output b.pdf user_pw pass                       |
| 解密             | pdftk a.pdf input_pw pass output b.pdf                      |
| 解压             | pdftk a.pdf output b.pdf uncompress                         |
| 压缩             | pdftk a.pdf output b.pdf compress                           |
| 修复             | pdftk a.pdf output b.pdf                                    |
| 切割             | pdftk a.pdf cat 1-end output b.pdf                          |
| 分解成单页       | pdftk a.pdf burst                                           |
|------------------+-------------------------------------------------------------|

** Linux connect to Android
#+begin_src 
kedconnect on linux
kedconnect on android
with  the same internet connection can be found each other, and communication

#+end_src

#+begin_src 
The file can be found in Download folder of each devices
#+end_src

** docker


|------------------------------+-----------------|
| comands                      | expains         |
|------------------------------+-----------------|
| docker images                | 查看容器        |
| docker pull nginx            | 新增            |
| docker run -d -p 80:80 nginx | 开始，id， 后台 |
| docker exec -it xxxxxx bash  | 前台进入，      |
| docker commit xxxxxx newname | 生成新容器      |
| docker kill -s KILL xxxxxx   | 关闭            |
|------------------------------+-----------------|

** gs
remove active content from pdf 
gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=CV.pdf -dBATCH CV.pdf
** mpv player
sudo apt install mpv

mpv.conf
#+begin_src 
no-osd-bar # 去掉白色进度条
save-position-on-quit # 关闭时记住文件播放位置
no-border # 去掉边框

# 解码-字幕
vo=opengl:gamma-auto:icc-profile-auto
hwdec=auto
autofit-larger=92%
playcache=8192
lang=zh,chi
video-sync=display-resample

sub-codepage=enca:zh:utf8
sub-auto=fuzzy
sub-text-font-size=40
sub-text-shadow-offset=0
sub-text-color="#ffffffff"
sub-text-font="STZhongsong"
sub-codepage=utf8:gb18030

screenshot-template=mpv-screenshot-%f-%p
screenshot-format=png

osd-font="STZhongsong"
osd-font-size=36

--script=/Users/yourname/.config/mpv/autoload.lua

#+end_src

autoload.lua
#+begin_src 
-- This script automatically loads playlist entries before and after the
-- the currently played file. It does so by scanning the directory a file is
-- located in when starting playback. It sorts the directory entries
-- alphabetically, and adds entries before and after the current file to
-- the internal playlist. (It stops if the it would add an already existing
-- playlist entry at the same position - this makes it "stable".)
-- Add at most 5000 * 2 files when starting a file (before + after).
MAXENTRIES = 5000

function Set (t)
    local set = {}
    for _, v in pairs(t) do set[v] = true end
    return set
end

EXTENSIONS = Set {
    'mkv', 'avi', 'mp4', 'ogv', 'webm', 'rmvb', 'flv', 'wmv', 'mpeg', 'mpg', 'm4v', '3gp',
    'mp3', 'wav', 'ogv', 'flac', 'm4a', 'wma',
}

mputils = require 'mp.utils'

function add_files_at(index, files)
    index = index - 1
    local oldcount = mp.get_property_number("playlist-count", 1)
    for i = 1, #files do
        mp.commandv("loadfile", files[i], "append")
        mp.commandv("playlist-move", oldcount + i - 1, index + i - 1)
    end
end

function get_extension(path)
    match = string.match(path, "%.([^%.]+)$" )
    if match == nil then
        return "nomatch"
    else
        return match
    end
end

table.filter = function(t, iter)
    for i = #t, 1, -1 do
        if not iter(t[i]) then
            table.remove(t, i)
        end
    end
end

function find_and_add_entries()
    local path = mp.get_property("path", "")
    local dir, filename = mputils.split_path(path)
    if #dir == 0 then
        return
    end
    local pl_count = mp.get_property_number("playlist-count", 1)
    if (pl_count > 1 and autoload == nil) or
       (pl_count == 1 and EXTENSIONS[string.lower(get_extension(filename))] == nil) then
        return
    else
        autoload = true
    end

    local files = mputils.readdir(dir, "files")
    if files == nil then
        return
    end
    table.filter(files, function (v, k)
        local ext = get_extension(v)
        if ext == nil then
            return false
        end
        return EXTENSIONS[string.lower(ext)]
    end)
    table.sort(files, function (a, b)
        local len = string.len(a) - string.len(b)
        if len ~= 0 then -- case for ordering filename ending with such as X.Y.Z
            local ext = string.len(get_extension(a)) + 1
            return string.sub(a, 1, -ext) < string.sub(b, 1, -ext)
        end
        return string.lower(a) < string.lower(b)
    end)

    if dir == "." then
        dir = ""
    end

    local pl = mp.get_property_native("playlist", {})
    local pl_current = mp.get_property_number("playlist-pos", 0) + 1
    -- Find the current pl entry (dir+"/"+filename) in the sorted dir list
    local current
    for i = 1, #files do
        if files[i] == filename then
            current = i
            break
        end
    end
    if current == nil then
        return
    end

    local append = {[-1] = {}, [1] = {}}
    for direction = -1, 1, 2 do -- 2 iterations, with direction = -1 and +1
        for i = 1, MAXENTRIES do
            local file = files[current + i * direction]
            local pl_e = pl[pl_current + i * direction]
            if file == nil or file[1] == "." then
                break
            end

            local filepath = dir .. file
            if pl_e then
                -- If there's a playlist entry, and it's the same file, stop.
                if pl_e.filename == filepath then
                    break
                end
            end

            if direction == -1 then
                if pl_current == 1 then -- never add additional entries in the middle
                    mp.msg.info("Prepending " .. file)
                    table.insert(append[-1], 1, filepath)
                end
            else
                mp.msg.info("Adding " .. file)
                table.insert(append[1], filepath)
            end
        end
    end

    add_files_at(pl_current + 1, append[1])
    add_files_at(pl_current, append[-1])
end

mp.register_event("start-file", find_and_add_entries)

#+end_src

** mellplayer
sudo apt-get install libmpv-dev mpv

** thunderbird
#+begin_src 
Alt to open the menubar,
Ansicht Anpassen to setting ungelesen
#+end_src

** EverSync
Eversync sync all bookmarks between chrome and firefox with G Konten
** IPFS
#+begin_src 

download go-ipfs and untar
cp ipfs /usr/local/bin and sudo ./install.sh

sudo apt install ipfs

ipfs init
export EDITOR=/usr/bin/emacs
ipfs config edit
ipfs id
ipfs  help
#+end_src


#+begin_src 

mkdir IPFS
echo "balabalu" > hallo.org
ipfs add hallo.org  :get file_hash
ipfs cat file_hash
ipfs.io/ipfs/file_hash
#+end_src

 push

#+begin_src 

ipfs add -r . (we get all file_hash(s), and a folder_hash(IPFS))
ipfs name publish folder_hash  (: to IDHASH)

in Webborser: ipfs.io/ipns/IDHASH


ipfs name resolve IDHASH : to HASH_file

特殊加密，暂时不用
ipfs key gen --type=rsa --size=2048 IPFS
ipfs name publish --key=IPFS folder_hash
#+end_src


#+BEGIN_SRC 
ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '["PUT", "GET", "POST","OPTIONS"]'

ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '["*"]'

ipfs config --json API.HTTPHeaders.Access-Control-Allow-Credentials '["true"]'

ipfs config --json API.HTTPHeaders.Access-Control-Allow-Headers '["Authorization"]'

ipfs config --json API.HTTPHeaders.Access-Control-Expose-Headers '["Location"]'


http://localhost:5001/webui

#+END_SRC

#+begin_src 

ipfs files mkdir /Docu

ipfs files ls /Docu

ipfs file cp /ipfs/HASH
#+end_src
** GPG
|------------------+---------------------------------------------------------|
| terminal encrypt | gpg --recipient ID --output en.org --encrypt source.org |
| terminal decrypt | gpg  en.org                                             |
| emacs encrypt    | epa-encrypt-file                                        |
| emacs decrypt    | epa-decrypt-file                                        |

encrypt by terminal, once decrypt by emacs, just as normal file, can be edited anytime
encrypt by emacs with password, passwd will be ask every time by after edit
if epa-file-select-key is t

* System control
** system backup
mount rsync

查看系统的磁盘 :lsblk
再将磁盘(也可以是某个分区)挂载到某个点 :

该磁盘可以是正在使用的磁盘或者分区  
#+BEGIN_SRC 
 mount /dev/disk /media/Linux
sudo mount /dev/sda1 /media/Backup

rsync -aAXv --delete --exclude=media target backup/LinuxBackUp20200316
my opera 

rsync -aAXv /home/sx/ /media/sx/A672BA1B72B9EFE3/linuxbackup/home/

#+END_SRC
如果要恢复，重复上面的过程，再将target backup 交换

** system performance
1. dependence
sudo apt-get install gir1.2-gtop-2.0 gir1.2-networkmanager-1.0
gir1.2-clutter-1.0

2. Ubuntu Software 
search for : system moniter extension

3. install and configure performance

* chinese config
** emacs chinese input
sudo apt install fcitx
download sougou for linux
sudo dpkg -i sougou......
fcitx set global
restart configuration to add sougou chinese


$ local -a |grep zh
sudo apt-get -y install language-pack-zh-hans
$ local -a |grep zh 
to see zh is installed

export LC_CTYPE=zh_CN.UTF-8
to language configuration and auto install drivers to zh_CN.UTF-8
so in emacs can input sougou, here we go

** chinese output pdf
for a orgmode file with 汉字
pandoc xxxx.org -o xxxx.pdf
pandoc xxxx.org -o xxxx.pdf --pdf-engine=xelatex
如果没有汉字支持
#+BEGIN_SRC 
fc-list -f "%{family}\n"  :lang=zh
pandoc test.org -o test.pdf --pdf-engine=xelatex -V mainfont="AR PL KaitiM GB"
#+END_SRC
找到支持的格式，再指明

* hardware
** memery
#+begin_src 
寻址能力 = 2^地址总线宽度
处理能力 = 2^数据总线宽度
数据总线宽度受制于计算机位数
#+end_src

* Makefile

gcc 调用 make 来构造

** 格式

目标 ： 依赖
Tab 命令

** 1example

实列文件：add.c  head.h   main.c   maul.c  sub.c  
直接在terminal 用gcc ：$ gcc add.c main.c sub.c -o app

Makefile :
$ touch Makefile
#+BEGIN_SRC  txt
app: main.c add.c sub.c mul.c
    gcc main.c add.c sub.c mul.c 
#+END_SRC
$ make

** 2修改后只编译改动后的文件

Makefile :
$ touch Makefile
#+BEGIN_SRC  txt
app: main.o add.o sub.o mul.o
    gcc main.o add.o sub.o mul.o -o app

main.o: main.c
    gcc -c main.c -o main.o

add.o: add.c
    gcc -c add.c -o add.o

sub.o: sub.c
    gcc -c sub.c -o sub.o

mul.o: mul.c
    gcc -c mul.c -o mul.o

#+END_SRC
$ make
所有源文件的修改过，即时间戳晚于生成的目标文件，则重新编译

** 3使用自动变量

$@ :目标
$< :第一个依赖 
$^ :所有依赖
Makefile :
$ touch Makefile

#+BEGIN_SRC  txt
obj =   main.o add.o sub.o mul.o
target = app

$(target):$(obj)
    gcc $(obj) -o $(target)  // gcc $^ -o $@
    
%.o:%.c
    gcc -c $< -o $@

#+END_SRC
$ make

** 4增加可移植性

wildcard :查找指定目录下的指定类型文件
src = $(wildcard ./*.c)
将当前目录下所有的.c 找到，并赋给src

patsubst :匹配替换
obj = $(patsubst %.c, %.o, $(src))
将src中的所有.c替换为.o

Makefile :
$ touch Makefile

#+BEGIN_SRC  txt
src = $(wildcard ./*.c)
obj = $(patsubst %.c, %.o $(src))
target = app

$(target):$(obj)
    gcc $^ -o $@
    
%.o:%.c
    gcc -c $< -o $@

#+END_SRC
$ make
此文件在别的目录下也能使用

** 5清洁中间的生成的不必要保存文件

make 一般直接执行终结目标，但是可以直接指定make的函数
clean : 删除不必要的文件，-f : 强制删除，不管有没有该文件，- : 前置-后，遇到错误执行，直接跳过

#+BEGIN_SRC  txt
src = $(wildcard ./*.c)
obj = $(patsubst %.c, %.o $(src))
target = app

$(target):$(obj)
    gcc $^ -o $@
    
%.o:%.c
    gcc -c $< -o $@

clean:
    rm $(obj) $(target)
    rm $(obj) $(target) -f
    -rm $(obj) $(target) -f

#+END_SRC

$ make
$ make clean

* link
** 静态库的制作
*** 库方

include/head.h  lib/  src/
将在src/中编写要实现的文件
并编译这些文件             $ gcc *.c -c -I ../include/
-I :链接头文件
再将这些编译后的打包       $ ar rcs libtest.a *.o
ar : -archive 打包
检测 : nm libtest.a
前缀lib 和后缀.a 不能更改，实际名字是test

最后将生成的libtest.a放到上级目录lib中，
可以将lib和include目录发送给甲方

*** 甲方

根据include/head.h 的头文件编写自己的应用文件main.c
编译main.c并链接头文件和库 
  $ gcc main.c -I  ./include/ -L ./lib/ -ltest -o app
-I : 连接头文件
-L : 链接库
-ltest : 链接库文件，去头lib 去尾.a
-o: 指点生成的应用名

*** 特点

优点： 加载块，移植方便
缺点 ：部署更新麻烦，引用的重复文件重复储存，浪费空间

** 动态库的制作

编译    $ gcc *.c -c -fpic -I ../include
-fpic 或者 fPIC : 特殊命令
打包    $ gcc -shared *.o -o libxxx.so
头lib 尾.so 

使用和静态库相似， 根据头文件编写应用文件main.c
$ gcc main.c -I ./inculde/ -L ./lib/ -lxxx -o app

对于linux生成的文件都是elf格式，并由ld-libc.so动态加载,需要让app能别找
到可以用环境变量或者配置文件

*** 环境变量

临时设置   
  $ export LD_LIBRARY_PATH=./lib
或者新增   
  $ export LD_LIBRARY_PATH=./lib:LD_LIBRARY_PATH

临时设置可以使用相对路径，

永久设置 用户
$ cat " LD_LIBRARY_PATH=./lib:LD_LIBRARY_PATH" >> ~/.bashrc
$ source ~./bashrc

永久设置 系统
$ sudo cat "LD_LIBRARY_PATH=./lib:LD_LIBRARY_PATH" >> /etc/profile
$ source /etc/profile

*** 修改配置文件

配置文件/etc/ld.so.conf
$ sudo cat "绝对路径/lib" >> /etc/ld.so.conf
$ sudo ldconfig -v 激活配置

*** 通过函数加载

dlopen dlclose dlsym

* BetreibenSystem
** exit

exit(0) will also send signal 17 (SIGCHID) to its father thread;

** named pipe

1. In current directory:   mkfifo("./myfifo", 0777);
with mkfifo creat a file, so that other unrelated process can commu  

2. In one process : fd = open("./myfifo", O_WRONGLY);
open the file,  and :
write(fd, &process_inter,1);
change the pipe variable.

3. In other process :   fd = open("./myfifo",O_RDONLY);
open the file, and : while(process_inter == 0);
can be controled by pipe variable 

** unnamed pipe

1. In one process diff threads
   creat place for pipe : int fd[2]; one for main thread, one for new thread
   creat pipe : int ret = pipe(fd);
   
   in new thread : read(fd[0], &process_inter 1); if nothing to read, sleep
   in main thread do its stuff, 
   after finish : write(fd[1], &process_inter, 1); let new pthread run
   
   remeber: wirte at frist in fd[1], and then read at fd[0]

** memcpy

memcpy(p, "niao",4);

** kill

kill(pid, 9);
send signal 9 to pid process

** raise

raise(9);  == kill(getpid(), 9);

** alarm

alarm(10);   wait for 10 seconds and kill itself
send signal as 14 to itself

** pause

pause(); stoped for ever

** signal

signal(signal_ID, self_function); self function or SIG_ING or SIG_DFL

** key

key can be 2 differ
#+BEGIN_SRC 

1. For father and son process : IPC_PRIVATE : 
2. For unrelated process : self_def key
  int key;
  key = ftok("./a.c", 'a');
  if (key < 0) {
    printf("create key for server failed \n");
    return -1;
  }
  printf("create key for server success \n");

#+END_SRC

** shmget

  shmid = shmget(IPC_PRIVATE, 128, 0777);
  shmid = shmget(key, 128, IPC_CREAT | 0777);

** shmat

char *p  = (char *) shmat(shmid, NULL, 0);
after mapping to p : can be manipulated
scanf("%s", p);
printf("%s", p);

** shmdt

delete the mapping of p to shared memory 
shmdt(p); 
after that, the manipulation of p is not allowed, and well be
segmention fault

** shmctl

delete the created shared memory
shmctl(shmid, IPC_RMID, NULL); == iprcm -m shmid

** IPC manipulation

show : ipcs -m(shared memory) -q(message queue) -s(semaphores) 
delete : ipcrm -m shmid /-q msgid /-s semid

** msgget

msgid= msgget(IPC_PRIVATE, 0777);

** msgctl

msgctl(msgid, IPC_RMID, NULL); == ipcrm -q msgid

** msgsnd

msgsnd(msgid, (void *)&sendbuffer, strlen(sendbuffer.message), 0);

** msgrcv

receivelen = msgrcv(msgid, (void *)&receiverbuffer, messagelen, 100, 0);

** semget

semid = semget(IPC_PRIVATE,3 ,  0777);

** semctl

semctl(semid, 0, IPC_RMID, NULL);

* Git
** tips
Raw 文件
** Git installation in Linux
#+BEGIN_SRC 
1. sudo apt install git

2. local configuration
#+begin_src sh
   git  config --global user.name "username1"
   git  config --global user.email "email1"
#+end_src
   git  config --list

3. in local terminal
#+begin_src sh
   ssh-keygen -t rsa -C "email2"
#+end_src
and then just all enter as default
   warming: email1 == email2

#+END_SRC
** Webconfig
#+BEGIN_SRC 
1. go to Fold Docu1, and in terminal git init to create local  repository
2. apply github count with:
   Email: email3
   Username: username3
   Password:xxxx
3. in setting add ssh key from local document: ./ssh/id_rsa.pub
4. create web repository with name Docu2
   Warming: Docu1 == Docu2
#+END_SRC
** Connection
#+BEGIN_SRC 

1. in local computer Docu1, create our files and prepare to push to
   Github
2. git add && git commit -m ""
3. git remote add origin HTTPS/SSH(of the created web repository)
   warming: with  HTTPS will be ask the Username:username3 and
   password:xxxx every time for the push, but SSH note
4. git push -u origin master
5. username3 and xxxx if necessary
6. later push it only use git push origin master
#+END_SRC
** Magit Commit "C-x g" in E** Github on Windows
#+BEGIN_SRC 
1.  download git(scm) for windows
2. copy package to somewhere to install
3. choose the install path and editor
4. create a NEW Repository and copy its ADDRESS
create a file, .ssh and
ssh-keygen -t rsa -C "your_email@example.com"
and the id_rsa.pub into Github(New SSH key)
5. to Desktop, git init
6. create file, git add, git commit
7. git remote and NAMe ADDRESS
8. git push NAMe master
#+END_SRC
** Merge with aother branch

#+BEGIN_SRC 
after pull, git checkout dev
git push -u name dev 

#+END_SRC
** Gitcommond
*** 创建mybranch分支

git branch mybrauch
git checkout mybrauch
create .gitignore
git add -A
git reset xxx.tex
git status
git commit -m "commit"
git add -A 
git commit -m "mybrauch"
git push -u origin mybrauch

*** merge mybranch分支到master分支
git checkout master
git pull origin master
git branch --merged
git merge mybrauch
git push origin master

*** 删除mybranch分支
git branch --merged
git branch -d mybrauch
git branch -a 
git push origin --delete mybrauch

** commands

add 添加索引  

编辑当前文件后，想恢复，且未添加索引(未 add) ：  git checkout --file
编辑当前文件后，想恢复，但已添加索引(已 add) ：  git reset HEAD file 再 git checkout --file
编辑当前文件后，想查变动，且未添加索引(未 add) ： git diff
编辑当前文件后，想查变动，但已添加索引(已 add) ： git diff --cached
编辑当前文件后，已提交(已 add),想撤出索引 ：    git rm --cached  file

编辑后，强制回到最近一次添加索引的版本：        git reset --hard HEAD
编辑后，强制回到最近倒数第二次添加索引的版本：   git reset --hard HEAD~
编辑后，强制回到最近倒数第n次添加索引的版本：    git reset --hard HEAD~n

如果将HEAD换成对应的ID， 也可以回到之前相应的版本。 但是如果想再回去，
又没有记住之前的ID， 可以用，       git reflog 查询.



commit 添加提交
和上次commit提交融合，不产生新的提交记录：  git commit --amend


branch 新分支
创建新的分支： git branch development
带着全部家当去新的分支： git checkout development

merge 融合分支
如果此时只有development分支改变，可以直接回到master, 把development分支
merge 过来   git merge development


** Magit
#+BEGIN_SRC 
C-x g  : open the git buffer
S or s : to stage
C      : to commit 
C-c C-c : to finish commit
P and p to push
#+END_SRC
** github conflict with local git
#+BEGIN_SRC 
delete from github
1. delete in github seit
2. git pull origin master
3. edit anyhow and push
#+END_SRC

#+BEGIN_SRC 
delete from local git
git rm -r  target
git add *
git commit -m "commit"
git push origin master

#+END_SRC

** new system merge
#+BEGIN_SRC 
sudo apt install git
config 3646
add ssh-key
git clone
git push

#+END_SRC

* note                                                                :crypt:
-----BEGIN PGP MESSAGE-----

jA0ECQMCZnPhy397Vjz/0uoBN1HthbTwBC8Lz4oWahdDirG0DCK40qKx5LV5SwXP
XjbEuvTJKxhCRuA4eeqgAqhCNuusbhqrGwk8G8DGMuFVvuogC4fKbmO6RSyAwrkh
S8OZfJ6ZibPmlVIQW4vOwNTlLMm3ttOnvnHhRzgKNHIT+t19qBDnyOKAT0KfTDR7
vdom6Fp7/8PkmMLO8ZehU/U5+rPr+Y/d0g958TchYGQQDyr2BW+rAKkhsMfjLGBO
OfGjG8xg0Xfj+2NPB3nITz8q7Y7H6Q6TaaP9s+HTPUTv6n3GxLXoJnFbXEIwvt22
FbN+oRdpw1S/gSHm/Plse9MxSGgWNrLYHIFTIyIqqxewxGq5HI/0dGqsD6oyb55p
G9sPzWiuokgibMSOLtK4HEiCPmAtzuW5EqWuVEq72r599lHHSWJmmKHK2c0wUmLB
FCpQJEItJpel+UjVc8JQ1enpfjaspP5HzTZNRU+KtAEtqZeQenGGAzBGGKqVw3UE
RmyIQh4/1de6A3Pin2ZfQ+4rYB+HEKKBR5/qo0Vh4XmGyLV/pwI21NYyp+15dwo9
Fv2QVABKq6hJFWIPD8pyORhKJFgEVD4/+U3oP3mjJpcSEquGOIMc5SsHdjH7HMTv
W4oz+6tLTdo+GivAj16aLq0V0SJRe0kr9Hhekf2WbVG1taCzTCIOrbqZpuLhHSiV
we2+Q4QjLMJ/opfWPQ8g0n9bXmokCnIb/2O0ZYiX9zwZmSYKdX8jliQw9qwShll/
1IZ9A+p8caGjPpPvDbQiB+ALk6jWGB4MYUllJXnT8e2sf3lUpSi+vIk//AKwLh5p
YpTRjEfHoFvQzYmsBd71jKoiziMXaXrsVFZl1noJXOLSGTHAg1UqGZKJK28xGJOK
dQb2Dm35sEudqOmom3Nqjbj53XMsNYULtsVPP6+tE8R07E5qutvJZYd069ccPJEA
WFQn0ok2bhNbCLtalscsTjVLN3QjqxGO46qZ+ExjmIfGa26qXc3RPeZQwJmEiK4t
IzNd9iDtkf1QGWtkdd2MVGXIRdc+LKnJ3GatRiRT+n/IU8dceQch9UEWJgdf5YWm
R4dJgXtLyD/NWPgRn/el1ldBamuXPVQVfrPLzeKURe6SY+hpVqM2JUS8HIbLfa/Z
YfSsUejCCNpZR7OMIfFyctD7SjpgTQwdTHzzWq9BRrFKupEFy0HGTBXYVYK5Mf/O
uXRtxHBO+G7/532vICWf8xeMNBOonSEWEBrKmE1mMu8h2jjiNkMoRqgSg4VQg0dt
HwisXF2sPlZUX/cEm7dHdbW26OBSHIowiDVtijHOg3VdQMp8gNfqB7caBX/nHrCv
2HZNA7H1ndINmemLc2xKwWftzpMtMcx99aj3lwzd/gsjwKnHEVHz13bsSA/knraO
x+NnHjxYG6bwFX/T6BYcjtm7n0xke5lfYl8/UCMgAttnUS5xtI0e8YVXaH7o6JOT
pUvrBrx/a3hKYBSRbgLHOIqq59uxxAn983Po/kOnrCkvnIw44vih02D0WzO6qBcs
NgJjK/0TQBOhQBWWFJ2xwnyf0nUdenXE8mqxXhKGYtINDnkuRC/g+YMqoPOSPoVl
IQ9NCSgHOmwTYOnJk+FGobV6UKbfqOi8KJjyNSWxMSBwwTC6BTUafOXnuf2vVVtH
gIOJEpsjBqZR++ynrt2QKoOCsxeXf3CMkg8aU1S7BK6Tv42ms/czQEp86WuniuSz
+UcDXjcxNt77w9wk+9Ypj1OHmag0oQ1tFMdT8L8Gs5nCI20n7Rr87Daqep9kr7Fl
wTvbp2i4CNFrixtpKsQAVT/+QLsH9UOJbUN5FwY/Ldyhs9Xhp07sSj/OhTjVM2Sf
Rf+xpNZfp2cjQWUE
=AXxO
-----END PGP MESSAGE-----
