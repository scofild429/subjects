#+TITLE: PyTorch
#+OPTIONS: num:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+startup: content

* Basic
** cpu with cuda.gpu 
#+begin_src ipython :results output

  import torch
  import time
  print(torch.__version__)
  print(torch.cuda.is_available)

  a = torch.randn(10000, 1000)
  b = torch.randn(1000, 2000)

  t0 = time.time()
  c = torch.matmul(a, b)
  t1 = time.time()
  print(a.device, t1-t0, c.norm(2))

  device = torch.device('cuda')
  a = a.to(device)
  b = b.to(device)

  t0 = time.time()
  c = torch.matmul(a, b)
  t2 = time.time()
  print(a.device, t2-t0, c.norm(2))


  t0 = time.time()
  c = torch.matmul(a, b)
  t2 = time.time()
  print(a.device, t2-t0, c.norm(2))
#+end_src

#+RESULTS:
: 1.7.0+cu101
: <function is_available at 0x7f58ba0e9d90>
: cpu 0.22681307792663574 tensor(141040.8438)
: cuda:0 0.004456043243408203 tensor(141442.0938, device='cuda:0')
: cuda:0 0.00037932395935058594 tensor(141442.0938, device='cuda:0')


** auto Derivative

#+begin_src ipython :results output
  import torch
  from torch import autograd

  x = torch.tensor(1.)
  a = torch.tensor(1. , requires_grad=True)
  b = torch.tensor(2. , requires_grad=True)
  c = torch.tensor(3. , requires_grad=True)

  y = a**2*x + b*x + c

  print('before:', a.grad, b.grad, c.grad)
  grad = autograd.grad(y, [a,b,c])
  print('after:', grad[0], grad[1], grad[2])

#+end_src

#+RESULTS:
: before: None None None
: after: tensor(2.) tensor(1.) tensor(1.)


** small example
#+begin_src ipython :results output
  import torch

  x = torch.ones(2,2,requires_grad=True)
  y = x +2
  z = y*y*3
  out = z.mean()
  out.backward()
  print(x.grad)

#+end_src

#+RESULTS:
: tensor([[4.5000, 4.5000],
:         [4.5000, 4.5000]])


\begin{equation}
x = 
  \left(
  \begin{array}{cc}
          1  & 1  \\
          1  & 1 \\
  \end{array}
  \right)
\end{equation}



\begin{equation}
y =    2 + x =
  \left(
  \begin{array}{cc}
          3  & 3  \\
          3  & 3 \\
  \end{array}
  \right)
\end{equation}


\begin{equation}
z =   3*y*y =
  \left(
  \begin{array}{cc}
          27  & 27  \\
          27  & 27 \\
  \end{array}
  \right)
\end{equation}

$$ out = \frac{1}{4}\sum_{i=1,j=1}^{i=2, j=2}3y_{ij}y_{ij} =\frac{1}{4}\sum_{i=1,j=1}^{i=2, j=2}3(2+x_{ij})(2+x_{ij}) $$

x.grad is to say :
$$ \frac{d(out_{ij})}{d(x_{ij})}  = 3(2+4)/4 = 4.5$$ 












* Function
** x = x.new_ones(4,3)
the desired type of returned tensor. Default: if None, same torch.dtype as this tensor.

device (torch.device, optional)


