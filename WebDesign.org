#+TITLE: Webdesige
#+OPTIONS: num:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+startup: overview
* WordPress Web development in AWS
** 构建后台
没事不要执行该代码
#+begin_src 
cd ~/Documents/web/key_aws
ssh ubuntu@3.124.205.43 -i pass1aws.pem
sudo apt update -y
sudo apt upgrade -y
sudo apt install apache2
sudo systemctl status apache2
sudo systemctl enable apache2
sudo apt install mariadb-server mariadb-client
sudo systemctl start mariadb
sudo systemctl status mariadb
sudo mysql_secure_installation ...
sudo systemctl restart mariadb
sudo apt install php php-mysql php-gd php-cli php-common
sudo apt install wget unzip
sudo wget https://wordpress.org/latest.zip
sudo unzip latest.zip
sudo cp -r wordpress/* /var/www/html/
cd /var/www/html/
sudo chown www-data:www-data -R /var/www/html/
sudo rm index.html 
## Now go to the IP webseit, when need database, do so
sudo mysql -u root -p
Enter
##  create database wordpress;
create database wordpress;
create user "wpadmin"@"%" identified by "wpadminpw";
grant all privileges on wordpress.* to "wpadmin"@"%";
exit;
#+end_src
back to the IP webseit,
pass the database , username and password,
set username and password for wordpress,
到此，可以用IP 地址访问前端和后台了
** 解析域名
route53, 用域名创建NS
A-IPV4,名称为空， 值为IP
CNAME，名称www, 值为域名
再将A 和CNAME 放到namecheap的域名的DNS管理中
** ssl
#+begin_src 
sudo a2enmod ssl
sudo systemctl restart apache2
cd ~
wget https://dl.eff.org/certbot-auto
chmod a+x certbot-auto
sudo ./certbot-auto --apache....
#+end_src
go to https://www.sslshopper.com/ssl-checker.html and check you domina

** scp
transfer file to linux instance of CE2
#+begin_src 
scp -i pass1aws.pem init.el ubuntu@3.124.205.43:.emacs.d
#+end_src

** external html
- 将文件传到部署根目录
- 复制文件xxx.html 为page-xxx.php到应用主题根目录
- 创建页面，先只写标题，保存后改别名，slug 为xxx
- 发布后，将页面设为菜单就能访问


* Web Design Envirement in Emacs
** lsp-mode
** lsp-java
** dap-mode

** Spring Boot
 Emacs : M-x lsp-java-springboot-generate
 after build the project, it can be compiled by Maven,and run

** project build digraph

 #+BEGIN_SRC  
   digraph diagramm {
           Emacs  [shape=box,color=red]
           LspJavaSpringInitizer [shape=box,color=red]
           Config [shape=box,color=red]
           dapDebug [shape=box,color=red]
	     Programmierung [shape=box,color=red]

           Terminal ->  Maven建包;
           Maven建包 -> Maven加依赖pom;
           Maven加依赖pom -> OpenEmacsFile;
           OpenEmacsFile ->   Programmierung;
           Programmierung -> MavenCompile;
           MavenCompile -> MavenPackage;
           MavenCompile -> dapDebug[label = "也可./mvnx"];
           MavenPackage -> 执行jar包;
           MavenPackage -> dapDebug;
           执行jar包 -> dapDebug;

           Emacs -> LspJavaSpringInitizer;
           LspJavaSpringInitizer -> Config;
           Config -> Programmierung;
           Programmierung -> dapDebug;
           dapDebug -> Webbroser;

   }
 #+END_SRC

#+begin_src 
1 add the to the above SRC begin:  dot :file ../sysconf/foto/webbuild.png
2 delete the output :  [[file:../sysconf/foto/webbuild.png]]
3 push the sysc repository, because the foto is located in it
4 add the link from sysc repository
 https://github.com/scofild429/sysc/blob/master/foto/webbuild.png
#+end_src

[[ https://github.com/scofild429/sysc/blob/master/foto/webbuild.png]]

** appeared Problem
*** server is not startup
 1, workspace 有重叠和包含，
 2, 需要重启 lsp mode
*** can't find the main class to start project
 mvn compile 出现问题，大多数时候是依赖的问题

*** 没有对应的补全
 mvn 依赖的version 不同会有不同的包，补全也不同



* Maven
** package all the dependencies together as a jar 
if I want to package them to a package to a jar
[[https://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven][starkoverflow hitting]]
and this plugin to pom.xml
#+begin_src 
<build>
  <plugins>
    <plugin>
      <artifactId>maven-assembly-plugin</artifactId>
      <configuration>
        <archive>
          <manifest>
            <mainClass>fully.qualified.MainClass</mainClass>
          </manifest>
        </archive>
        <descriptorRefs>
          <descriptorRef>jar-with-dependencies</descriptorRef>
        </descriptorRefs>
      </configuration>
    </plugin>
  </plugins>
</build>
#+end_src

package and Execute 
- run with : mvn clean compile assembly:single
- mvn package
and now this jar file can be called
- java -cp target/xxxx....xx.jar com.mycompany.app.App 
** customize locally archetype
to the local repository
#+begin_src sh
  cd ~/.m2/repository/org/apache/maven/archetypes/maven-archetype-quickstart/1.4/
#+end_src
open the jar file, and change the pom.xml

 


* Spring
** xml方式
*** IOC & DI
bean 创建普通类 ：拿到IOC权力后，可有3种DI
- Set注入 利用set方法
- cost注入 利用构造方法，可和set 注入混用
- auto注入 byTpye / byName 

bean工厂
bean也可以创建配置类，方法一样，但是该类的实现配置依赖要完整

模式： 单例和多例：生命周期：创建和销毁时间
*** AOP 

切入点 和 增强
动态代理，(JDK，接口) (CGLib, 接口)

前置，后置，环绕
class 1 -> Bean 1
Bean 1 + pointcut(expression,within,args) + class 2 -> Bean 2

** 注解方式
*** 申明 
Service  Repository Component Controller Transaction

*** 注入
Resource(输入)
Autowire (类型)

*** AOP 
Aspect, 同样3种

** 配置类方式


* SpingMVC
* Spring Boot
Emacs : M-x lsp-java-springboot-generate
after build the project, it can be compiled by Maven,and run

* MySQL
** 事务隔离
1 可同时访问修改   脏读
2 隔离访问        不可重返读
3 单人访问        幻读
** single java file connect to mysql

1.download the driver to a current to java file

[[https://jar-download.com/artifacts/mysql/mysql-connector-java][official web]], and in my case 

mysql-connector-java-8.0.20.jar

2.add the current path to the CLASSPATH

export CLASSPATH=mysql-connector-java-8.0.20.jar:.

3.compile and connect
** mvn project connect to mysql
*** execute in emacs
1. create mvn project
2. find the plugin of mysql and add it to pom.xml
3. programmierung 
4. the connection can be call in the dabug of emacs
M-x :dap-debug
*** execute as a jar file
if I want to package them to a package to a jar
[[https://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven][starkoverflow hitting]]
and this plugin to pom.xml
#+begin_src 
<build>
  <plugins>
    <plugin>
      <artifactId>maven-assembly-plugin</artifactId>
      <configuration>
        <archive>
          <manifest>
            <mainClass>fully.qualified.MainClass</mainClass>
          </manifest>
        </archive>
        <descriptorRefs>
          <descriptorRef>jar-with-dependencies</descriptorRef>
        </descriptorRefs>
      </configuration>
    </plugin>
  </plugins>
</build>
#+end_src
and run with : mvn clean compile assembly:single

and then mvn package

can be called by jar file

java -cp target/xxxx....xx.jar com.mycompany.app.App 
** springboot
just call the plugins at the start

** 事务
** 事务隔离
** 范式
** 连接池
** 外键
** 多表
** single java file connect to mysql

1. download the driver to a current to java file ,[[https://jar-download.com/artifacts/mysql/mysql-connector-java][official web]], and in my case 

   - mysql-connector-java-8.0.20.jar

2. add the current path to the CLASSPATH

   - export CLASSPATH=mysql-connector-java-8.0.20.jar:.

3. compile and connect

** execute in emacs
1. create mvn project
2. find the plugin of mysql and add it to pom.xml
3. programmierung 
4. the connection can be call in the dabug of emacs
M-x :dap-debug
* JDBC
- Driver
- connection
- mysql
- execute
- statement
- preperedstatement
- close

* mybatis
** 流程
- 获取字节输入流
- 构建SqlSessioFactory
- 生产SqlSession
- 执行Dao
- 释放资源

** 延迟加载
** 缓存
** 一级缓存
SqlSession
** 二级缓存
SqlSessionFactory
** 注解开发

* redis
* Shiro
* Nginx
* Servlet
* c3p0
* Rruid
* Bootstrap
* JQary
* IDEA
* AJAX

* Web Design Envirement
** lsp-mode
** lsp-java
** dap-mode
* project build digraph

#+BEGIN_SRC  dot :file ../sysconf/foto/webbuild.png
  digraph diagramm {
          Emacs  [shape=box,color=red]
          LspJavaSpringInitizer [shape=box,color=red]
          Config [shape=box,color=red]
          dapDebug [shape=box,color=red]
	    Programmierung [shape=box,color=red]

          Terminal ->  Maven建包;
          Maven建包 -> Maven加依赖pom;
          Maven加依赖pom -> OpenEmacsFile;
          OpenEmacsFile ->   Programmierung;
          Programmierung -> MavenCompile;
          MavenCompile -> MavenPackage;
          MavenCompile -> dapDebug[label = "也可./mvnx"];
          MavenPackage -> 执行jar包;
          MavenPackage -> dapDebug;
          执行jar包 -> dapDebug;

          Emacs -> LspJavaSpringInitizer;
          LspJavaSpringInitizer -> Config;
          Config -> Programmierung;
          Programmierung -> dapDebug;
          dapDebug -> Webbroser;

  }
#+END_SRC

#+RESULTS:
[[file:../sysconf/foto/webbuild.png]]

* appeared Problem
** server is not startup
1, workspace 有重叠和包含，
2, 需要重启 lsp mode
** can't find the main class to start project
mvn compile 出现问题，大多数时候是依赖的问题

** 没有对应的补全
mvn 依赖的version 不同会有不同的包，补全也不同

* deployment

** local Nginx deployment


sudo apt install nginx

/etc/nginx/ 是其配置文件夹，里面有很多include文件，
nginx 的默认设置在其中一个 default 文件里。
本机html仓库 /var/www/html
将项目放在此文件夹下，运行对于的端口即可
本机开机后,该文件的会被自动部署,端口可见
*** fire wall 80 port if necessary
#+BEGIN_SRC 
  add port :
  sudo firewall-cmd --add-port=80/tcp --permanent
  restart firewall:
  sudo  firewall-cmd --reload
  check port:
  sudo  firewall-cmd --list-all
#+END_SRC
*** nginx control
#+BEGIN_SRC 
sudo apt systemctl stop nginx
nginx -s stop
sudo apt systemctl start nginx
nginx -s reload
#+END_SRC

*** uninstall
sudo apt-get purge nginx nginx-common


** Docker envirement deployment

|--------------------------------------------+-----------------|
| comands                                    | expains         |
|--------------------------------------------+-----------------|
| docker images                              | 查看容器        |
| docker pull nginx  [fn:nginx]              | 新增            |
| docker run -d -p 80:80 nginx [fn:docker-v] | 开始，id， 后台 |
| docker exec -it xxxxxx bash                | 前台进入，      |
| docker commit xxxxxx newname               | 生成新容器      |
| docker kill -s KILL xxxxxx                 | 关闭            |
|--------------------------------------------+-----------------|


[fn:nginx] 对于新到手的项目可以直接放到容器的nginx根目录（快速部署 /usr/share/nginx/html），可以在映射的
本机端口进入


[fn:docker-v] to my case:
#+begin_src 
sudo docker run -d -p 80:80 -v /home/sx/Documents/Java/ANANProject/layuimini/:/usr/share/nginx/html/ nginx
#+end_src

Beispile
#+begin_src 

sudo docker images
sudo docker pull nginx
sudo docker run -d -p 80:80 nginx -> id:xxxxxxx
sudo docker exec -it -v /....../project:/usr/share/nginx/html xxxxxxx
build in - > local host :80  
#+end_src

