#+TITLE: Scientific packages
#+OPTIONS: num:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+STARTUP: content

* pandas 
** plot.scatter()
#+begin_src python :results output
  import pandas as pd
  import numpy as np
  a = pd.DataFrame(np.random.rand(3,2))
  print(a)
  a.plot.scatter(x=0, y = 1)


#+end_src

#+RESULTS:
:           0         1
: 0  0.768941  0.501116
: 1  0.514047  0.526439
: 2  0.843669  0.523868




* matplotlib.plot
** two linear plot 
#+begin_src ipython :results output
  import numpy as np
  import random
  from matplotlib import pyplot as plt

  a = np.array([ x for x in range(10)])
  b = np.array([[random.randint(0,10) for x in range(10)],[random.randint(0,10) for x in range(10)]])
  plt.plot(a,b.T)
  plt.show()


#+end_src

#+RESULTS:

** simplest linear plot
#+BEGIN_SRC ipython :results output
  import matplotlib.pyplot as plt
  plt.plot([1,2,3,4])
  plt.ylabel('some numbers')
  plt.show()


#+END_SRC

#+RESULTS:

** simplest point plot
#+BEGIN_SRC ipython :results output
  import matplotlib.pyplot as plt
  plt.plot([1,2,3,4], [1,4,9,16], 'ro')
  plt.axis([0, 6, 0, 20])
  plt.show()


#+END_SRC

#+RESULTS:

** simplest function plot
#+BEGIN_SRC ipython :results output
  import numpy as np
  import matplotlib.pyplot as plt

  # evenly sampled time at 200ms intervals
  t = np.arange(0., 5., 0.2)

  # red dashes, blue squares and green triangles
  plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
  plt.show()


#+END_SRC
** simplest subplot
#+BEGIN_SRC  ipython :results output
  import numpy as np
  import matplotlib.pyplot as plt

  def f(t):
      return np.exp(-t) * np.cos(2*np.pi*t)

  t1 = np.arange(0.0, 5.0, 0.1)
  t2 = np.arange(0.0, 5.0, 0.02)

  plt.figure(1)
  plt.subplot(211)
  plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')

  plt.subplot(212)
  plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
  plt.show()


#+END_SRC
** histogram plot with cusomised legend
#+BEGIN_SRC  ipython :results output
  import numpy as np
  import matplotlib.pyplot as plt

  # Fixing random state for reproducibility
  np.random.seed(19680801)

  mu, sigma = 100, 15
  x = mu + sigma * np.random.randn(10000)

  # the histogram of the data
  n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)


  plt.xlabel('Smarts')
  plt.ylabel('Probability')
  plt.title('Histogram of IQ')
  plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
  plt.axis([40, 160, 0, 0.03])
  plt.grid(True)
  plt.show()


#+END_SRC
** histogram plot 
#+BEGIN_SRC  ipython :results output
  import numpy as np
  import matplotlib.pyplot as plt

  # Fixing random state for reproducibility
  np.random.seed(19680801)

  mu, sigma = 100, 15
  x = mu + sigma * np.random.randn(100000)

  # the histogram of the data
  n, bins, patches = plt.hist(x, 50, facecolor='g')

  plt.xlabel('Smarts')
  plt.ylabel('Probability')
  plt.title('Histogram of IQ')
  #plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
  #plt.axis([40, 160, 0, 0.03])
  #plt.grid(True)
  plt.show()



#+END_SRC
** histogram y axis with log index
#+BEGIN_SRC  ipython :results output

  import numpy as np
  import matplotlib.pyplot as plt
  from matplotlib.ticker import NullFormatter  # useful for `logit` scale

  # Fixing random state for reproducibility
  np.random.seed(19680801)

  # make up some data in the interval ]0, 1[
  y = np.random.normal(loc=0.5, scale=0.4, size=1000)
  y = y[(y > 0) & (y < 1)]
  y.sort()
  x = np.arange(len(y))

  # plot with various axes scales
  plt.figure(1)

  # linear
  plt.subplot(221)
  plt.plot(x, y)
  plt.yscale('linear')
  plt.title('linear')
  plt.grid(True)


  # log
  plt.subplot(222)
  plt.plot(x, y)
  plt.yscale('log')
  plt.title('log')
  plt.grid(True)


  # symmetric log
  plt.subplot(223)
  plt.plot(x, y - y.mean())
  plt.yscale('symlog', linthreshy=0.01)
  plt.title('symlog')
  plt.grid(True)

  # logit
  plt.subplot(224)
  plt.plot(x, y)
  plt.yscale('logit')
  plt.title('logit')
  plt.grid(True)
  # Format the minor tick labels of the y-axis into empty strings with
  # `NullFormatter`, to avoid cumbering the axis with too many labels.
  plt.gca().yaxis.set_minor_formatter(NullFormatter())
  # Adjust the subplot layout, because the logit one may take more space
  # than usual, due to y-tick labels like "1 - 10^{-3}"
  plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25, wspace=0.35)

  plt.show()


#+END_SRC
** a example of mean standrad deviation plotting 
#+BEGIN_SRC  ipython :results output
  import matplotlib.pyplot as plt;
  import numpy as np
  import scipy.stats
  import scipy as sp
  from scipy import integrate
  from scipy.optimize import curve_fit

  data = np.genfromtxt('Highz_SN_data.txt');

  redshift = np.array([data[:,2]])
  mu = np.array([data[:,3]])
  velocity = np.array([data[:,4]])
  redshift_mean = np.mean(redshift)
  mu_mean = np.mean(mu)
  velocity_mean = np.mean(velocity)
  redshift_std = np.std(redshift)
  mu_std = np.std(mu)
  velocity_std = np.std(velocity)
  para = ["redshift", "mu", "velocity"]
  x_pos = np.arange(len(para))
  ctes = [redshift_mean, mu_mean, velocity_mean]
  error = [redshift_std, mu_std, velocity_std]


  fig, ax = plt.subplots()
  ax.bar(x_pos, ctes, yerr=error, align='center', alpha=0.5, ecolor='black', capsize=10)
  ax.set_ylabel('Coefficient of Thermal Expansion ($\degree C^{-1}$)')
  ax.set_xticks(x_pos)
  ax.set_xticklabels(para)
  ax.set_title('Coefficent of Thermal Expansion (CTE) of Three Metals')
  ax.yaxis.grid(True)

  # Save the figure and show
  plt.tight_layout()
  plt.savefig('bar_plot_with_error_bars.png')
  plt.show()

#+END_SRC



