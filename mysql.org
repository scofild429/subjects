#+TITLE: MySql
#+OPTIONS: num:nil
#+SETUPFILE: /home/silin/.emacs.d/org-html-themes/org/theme-bigblow.setup
#+STARTUP: content
* 配置
** 安装
#+begin_src 
sudo apt install mysql-server
sudo mysql_secure_installation
#+end_src

此时是给电脑的root用户，创建了一个mysql里root用户的数据库
*** 电脑的root用户
sudo apt install mysql-server
sudo mysql_secure_installation
上面默认设置的是电脑root用户的密码，也就是说只能 sudo 登陆 : sudo mysql -u root -p

*** 电脑的普通用户进入配置


|------+--------------------------+---------------------------------------------------+------------------------------------------------------------|
| step | env                      | command                                           | explain                                                    |
|   01 | terminal                 | sudo mysql -u root -p                             | 电脑root进入mysql的root                                    |
|   02 | mysql                    | select User, Host, plugin from user;              | 获取                                                       |
|   03 | mysql                    | update user set plugin='mysql_ native_ password'; |                                                            |
|   04 | mysql                    | select User, Host, plugin from user;              | 获取                                                       |
|   05 | mysql                    | flush privileges;                                 | 权限更新 in mysqld:skip-grant-tables                       |
|   06 | mysql [fn:nopasswordset] | C-d C-d                                           | 退出                                                       |
|   07 | terminal                 | mysql -u root    BUT NOT (mysql -u root -p)       | 不能 -p, 密码为空，直接Enter进入                           |
|   08 | mysql                    | set password for root@localhost = '123'           | 老版本  = password('123');                                 |
|   09 | error                    | 123 is too simple, just not satisfy the           | requirement to password so check the password requirement. |
|   10 | mysql                    | show variables like 'validate_ password%';        | 显示密码设置要求                                           |
|   11 | mysql                    | set global validate_ password_ length=3;          | 设置密码长度要求 为 3                                      |
|   12 | mysql                    | set global validate_ password_ policy=0;          | 设置密码要求概要  为 0                                     |
|   13 | mysql                    | set password for root@localhost = '123'           | 老版本  = password('123');                                 |
|   14 | mysql                    | flush privileges;                                 | 权限更新 in mysqld:skip-grant-tables                       |
|   15 | terminal                 | mysql -u root -p                                  | 密码 123 , 登陆时不需要 sudo 开头                          |
|------+--------------------------+---------------------------------------------------+------------------------------------------------------------|

** 给数据库添加用户
在进入数据库的root后，mysql 添加普通用户 [[https://www.jianshu.com/p/d7b9c468f20d][简书连接]] .

create USER 'sx'@'localhost' IDENTIFIED BY 'scofild';
创建sx用户，只能本地连接，秘密scofild

GRANT ALL ON testforjava.course TO 'sx'@'localhost';
开放testforjava数据集中的course数据表的所有全线给sx 用户

退出后登陆 sx 用户
mysql -u sx -p 
scofild

便只能看到有权限的数据集

** 查看数据库及添加数据库

show databases;

create databese kurs;

drop databases kurs;

** 中文设置 

| show variables like 'character%'; |
|                                   |


听说mysql的utf8不是真的utf8，需要使用utf8mb4.
在用户登陆后用set charactater server database = utf8 或者utf8mb4， 只要重开接入，设置就复原。
只有在/etc/mysql/中的mysql.cnf中的clint/mysqld/mysql字段加入以上设定，重启生效

| 在[client]下追加 | default-character-set=utf8 |
| 在[mysqld]下追加 | character-set-server=utf8  |
| 在[mysql]下追加  | default-character-set=utf8 |

** 特殊字符
 - 用`ry-vue` 
 create database `ry-vue`;

** 执行sql文件
   mysql -u root  -p xxxx
   use database;
   source .../file.sql 

* 进入数据库并操作
** 进入数据库
create databese testforjava;
use testforjava;
** 插入表格
create table course(id int primary key atuo_increment,  kurs_name varchar(50), kurs_length
varchar(50),teacher varchar(50), categeory varchar(50));
for later version, only works for auto_increment, not for identity(m,n)
** 插入值
insert into kurs values(1, 'C++', 23, 'su', 'basic');
insert into kurs values (2, 'Python', 50, 'morvan', 'hard');
insert into kurs values(3, 'CLI', 22, 'su', 'basic');


或者 不完整信息

insert into kurs(id, kurs_name, categeory) values(4, 'java', 'basic'); 
(指定属性给值)
** 查看表格 

show tables;

describe course;
** 编辑表格

alter table course rename kurs;  (重命名)

alter table kurs add link varchar(50); (添加属性，列)

alter table kurs drop column link;   (将该列删除)

alter table kurs modify teacher varchar(100); (修改该列的属性，增加容量)

alter table kurs change column teacher lecture varchar(100); (修改该列的名称，和属性，)

** 读取内容

select * from kurs;

select kurs_name, lecture from kurs;

读取内容时，不重复显示

select distinct lecture from kurs;

** 高级条件查询

select * from course where course_name = 'gnome';

select * from course where course_length > 10;

select * from course where lecture='su' and categeory='adv';
(满足这两个要求的)
select * from course order by  course_length desc;
(由课程长度有小到大排序) 后面加desc 则反序排序
* 管理
** 用户管理

show databases;
use mysql;
show tables;

mysqld --skip-grant-tables (开启mysql的无验证登陆，对于遗失密码后）
select host,user from user; (查看所有用户)

create user si identified by 'lin'; (添加si用户，密码为lin)

drop user si; (删除si用户)

rename user si to shi; (将si重命名为shi)

set password = password('new');  (将当前用户密码改为new)

set password for si = password(link); (将si用户密码重置为link)
** 权限
*** 查询
 show grants for 'newuser'@'localhost'
*** 授予
grants 权限列表 on 数据库名.表明 to '用户'@'主机名'
grants all on *.* 'newuser'@'localhost'
*** 撤销
revoke delete on *.* from 'newuser'@'localhost'
** 时区
set global time_zone = '+8:00';  ##修改mysql全局时区为北京时间，即我们所在的东8区
set time_zone = '+8:00';  ##修改当前会话时区
flush privileges;  #立即生效
** 删除

delect * from course where id =2;

delect * from course 删除整个表的信息
** 更新
update course set lecture = 'Lee'  where id =3;

* 备份和还原 
** check the database 
#+name: my-query
#+header: :engine mysql
#+header: :dbhost localhost
#+header: :dbuser root
#+header: :dbpassword "123456"
#+header: :database testforjava
#+begin_src sql
show tables;
#+end_src

#+RESULTS: my-query
| Database           |
|--------------------|
| information_schema |
| 0812erp            |
| mysql              |
| performance_schema |
| sys                |
| testforjava        |

** dump database

#+begin_src sh
  mysqldump -uroot -p123456 testforjava > ~/Desktop/mysql.sql
#+end_src

#+RESULTS:

** delete database
#+name: my-query1
#+header: :engine mysql
#+header: :dbhost localhost
#+header: :dbuser root
#+header: :dbpassword "123456"
#+begin_src sql
drop database testforjava;
show databases;
#+end_src

#+RESULTS: my-query1
| Database           |
|--------------------|
| information_schema |
| 0812erp            |
| mysql              |
| performance_schema |
| sys                |

** recover testforjava
#+name: my-query2
#+header: :engine mysql
#+header: :dbhost localhost
#+header: :dbuser root
#+header: :dbpassword "123456"
#+begin_src sql
create database testforjava;
use testforjava;
source ~/Desktop/mysql.sql
show databases;
#+end_src

#+RESULTS: my-query2
| Database           |
|--------------------|
| information_schema |
| 0812erp            |
| mysql              |
| performance_schema |
| sys                |
| testforjava        |

* 权限

grant all privileges on *.* to 'shi'@'%' identified by 'lining';

grant all privileges on *.* to 'root'@'%' identified by 'lining';

* 数据的备份

mysqldump -u root -p kurs > firstForFun.sql;
(在root下将kurs数据库备份为FirstForFun.sql)

mysql -u root -p kurs < Firstforfun.sql
(将备份文件FirstForFun.sql恢复为kurs数据库)

(此两个语句是在退出sql后的terminal执行的)
* python connect with mysql Beispile

#+begin_src python :results output

  import pymysql
  db = pymysql.connect("localhost", "root", "123456", "testforjava")
  cursor = db.cursor()
  sql = """create table  IF NOT EXISTS course(id int,  kurs_name varchar(50), kurs_length varchar(50),teacher varchar(50), categeory varchar(50))"""
  cursor.execute(sql)
  sql = """insert into course values(7, 'CLI', 22, 'su', 'basic')"""
  cursor.execute(sql)
  sql = """insert into course values(8, 'CLI', 22, 'su', 'basic')"""
  cursor.execute(sql)
  db.commit()

  sql1 = """select * from course"""
  cursor.execute(sql1)
  results = cursor.fetchall()
  print('\n')
  for row in results:
      num = row[0]
      name = row[1]
      age = row[2]
      right = row[3]
      dis = row[4]
      print("num is %7s, name is %7s, age is %7s, right is %7s, dis is %7s" %
            (num, name, age, right, dis))

  # if __name__ == "__main__":
  cursor.close()

#+end_src

#+RESULTS:
#+begin_example


num is       1, name is     C++, age is      23, right is      su, dis is   basic
num is       2, name is  Python, age is      50, right is  morvan, dis is    hard
num is       3, name is     CLI, age is      22, right is      su, dis is   basic
num is       4, name is     CLI, age is      25, right is      su, dis is   basic
num is       4, name is     CLI, age is      25, right is      su, dis is   basic
num is       7, name is     CLI, age is      22, right is      su, dis is   basic
num is       8, name is     CLI, age is      22, right is      su, dis is   basic
num is       7, name is     CLI, age is      22, right is      su, dis is   basic
num is       8, name is     CLI, age is      22, right is      su, dis is   basic
num is       7, name is     CLI, age is      22, right is      su, dis is   basic
num is       8, name is     CLI, age is      22, right is      su, dis is   basic
#+end_example






* java connect with mysql

#+begin_src java   :classname JavaConnSQL :results output :dir ~/Desktop/
  import java.sql.*;
  public class JavaConnSQL
  {
      static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";  
      static final String DB_URL = "jdbc:mysql://localhost:3306/testforjava?useSSL=false&serverTimezone=UTC";
      static final String USER = "root";
      static final String PASS = "123456";
      public static void main( String[] args )
      {
          System.out.println( "Hello World!" );
          System.out.println("在dir中生成的代码， 如果dir中有驱动，则可以执行mysql的连接");
          System.out.println("提前执行");
          System.out.println("export CLASSPATH=mysql-connector-java-8.0.20.jar:. ");
          Connection conn = null;
          Statement stmt = null;
          try{
              Class.forName(JDBC_DRIVER);
              System.out.println("连接数据库...");
              conn = DriverManager.getConnection(DB_URL,USER,PASS);

              System.out.println(" 实例化Statement对象...");
              stmt = conn.createStatement();
              String sql;
              sql = "SELECT id, kurs_name FROM course";
              ResultSet rs = stmt.executeQuery(sql);

              while(rs.next()){
                  int id  = rs.getInt("id");
                  String name = rs.getString("kurs_name");
                  // 输出数据
                  System.out.print("ID: " + id);
                  System.out.print(", kurs name 站点名称: " + name);
                  System.out.print("\n");
              }
              rs.close();
              stmt.close();
              conn.close();
          }catch(SQLException se){
              // 处理 JDBC 错误
              se.printStackTrace();
          }catch(Exception e){
              // 处理 Class.forName 错误
              e.printStackTrace();
          }
      }
  }

#+end_src

#+RESULTS:
: Hello World!
: 在dir中生成的代码， 如果dir中有驱动，则可以执行mysql的连接
: 提前执行
: export CLASSPATH=mysql-connector-java-8.0.20.jar:. 


* Footnotes

[fn:nopasswordset]  此后，电脑的root用户将不能登陆，而此时电脑的普通,  用户可以登陆，但是没有设置密码，不能用 -p 登陆
