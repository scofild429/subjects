#+TITLE:  Information I
#+OPTIONS: num:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+startup: content

* Algotithm
** Komplexitätstheorie
*** Maximum Sequence Problem Beispile

|-----+---------------+----------------------------------------------------------|
| A1. | $O(n^3)$      | Erschöpfende Suche/ Brute-Force-Suche/ Exhaustive Search |
|-----+---------------+----------------------------------------------------------|
| A2. | $O(n^2)$      | Zwischen Prozessen mehr anwenden                         |
|-----+---------------+----------------------------------------------------------|
| A3. | $O(n \log n)$ | Rekursive                                                |
|-----+---------------+----------------------------------------------------------|
| A4. | $O(n)$        | Max Maxsuffix                                            |
|-----+---------------+----------------------------------------------------------|

*** Landau Symbols

\[ f = O(g) \leftrightarrow g = \Omega(f) \leftrightarrow \lim_{x \to
\infty} Sup|\frac{f(x)}{g(x)}| < \infty \]

\[ f = \Omega(g) \leftrightarrow g = O(f) \leftrightarrow \lim_{x \to
\infty} Inf|\frac{f(x)}{g(x)}| > 0 \]

\[ f = \Theta(g) \leftrightarrow g = \Theta(f) \leftrightarrow 0< \lim_{x \to
\infty} Inf|\frac{f(x)}{g(x)}| < \lim_{x \to \infty} Sup|\frac{f(x)}{g(x)}| < \infty \]

*** Master Theorem

In a Recursive process, we can form this,  \[ T_n = a \cdot T(\frac{n}{b}) + f(n) \],
for  $a \geq 1$, $b \geq 1$. T 代表递归符号,   a: 每次递归成几个部分,
n/b: 递归后每个部分的问题规模,  f(n): 递归后将所有部分融合的步骤, 作如
下变换：

$$ n^d = f(n) = O(n^{\log_b^a-\epsilon}) \\
   n^d = f(n)  \ge n^{\log_b^a-\epsilon} \\
   d \ge \log_b^a - \epsilon \\
   d \ge \log_b^a
$$
如果$\log_b^b$ 在减去一个存在的 \epsilon 后仍然大于d, 则 ：$T_n = \Theta (n^{\log_b^a})$.


$$
  n^d = f(n) = \Theta (n^{\log_b^a}) \\
  n^d = f(n)  = n^{\log_b^a} \\
  d = \log_b^a
$$
如果$\log_b^a 恒等于 d, 则： $T_n = \Theta (n^{\log_b^a} \cdot \lg^n)$


$$
   n^d = f(n) = \Omega(n^{\log_b^a+\epsilon}) \\
   n^d = f(n)  \le n^{\log_b^a+\epsilon} \\
   d \le \log_b^a +\epsilon \\
   d \le \log_b^a
$$
如果$\log_b^b$ 在加上一个存在的 \epsilon 后仍然小于d, 则 ：$T_n = \Theta (f(n))$.

** Tree Theorem
*** Vorgänger(u)

|--------------------+------------------+-------------------------------------|
| if least(root) = u |                  | no Vorgänger                        |
|--------------------+------------------+-------------------------------------|
| if u.L exits       |                  | greatest(u.L)                       |
|--------------------+------------------+-------------------------------------|
| if u.L not exits   | u is right child | father node                         |
| if u.L not exits   | u is left child  | (grand)father which has right child |
|--------------------+------------------+-------------------------------------|

*** Nachfolger(v)

|-----------------------+------------------+------------------------------------|
| if greatest(root) = v |                  | no Nachfolger                      |
|-----------------------+------------------+------------------------------------|
| if v.R exits          |                  | least(u.L)                         |
|-----------------------+------------------+------------------------------------|
| if v.R not exits      | v is left child  | father node                        |
| if v.R not exits      | v is right child | (grand)father which has left child |
|-----------------------+------------------+------------------------------------|

* Hash

Verlastungsfaktor  \[ \alpha = \frac{n}{m} ]\
n : elementen
m : Hash Blukets

For Kollision
Offenes Hash :  mit verkertete List
Universumes Hash : mit ein hash famliy function
Geschlossens Hash : die weiter hash bluket besiten
verdoppelungsstrategie : verkleinen order vergrossen die Hash Blukets

* P & NP

|-----------------+----+----------------------------------------------------------------------------|
| P problem       | {L | Es gibt ein Polynom p(n) und eine p(n)-Zeitbeschrankte DTM m mit L=L(m)}   |
| NP problem      | {L | Es gibt ein Polynom p(n) und eine p(n)-Zeitbeschrankte NTM m mit L=L(m)}   |
| ExpTime problem | {L | Es gibt ein Polynom p(n) und eine 2^p(n)-Zeitbeschrankte DTM m mit L=L(m)} |
|-----------------+----+----------------------------------------------------------------------------|

Rudction
Many-one-Rudction : alle  P Problem konnen auf one Problem reduzieren.

** NP

SAT <- 3SAT <- 3 Farbarkeit
            <- Clique
            <- Independent Set
            <- Vertex Set
            Pa


